// Code generated by counterfeiter. DO NOT EDIT.
package korefakes

import (
	"context"
	"sync"

	v1 "github.com/appvia/kore/pkg/apis/org/v1"
	"github.com/appvia/kore/pkg/kore"
)

type FakeTeams struct {
	CheckDeleteStub        func(context.Context, *v1.Team, ...kore.DeleteOptionFunc) error
	checkDeleteMutex       sync.RWMutex
	checkDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.Team
		arg3 []kore.DeleteOptionFunc
	}
	checkDeleteReturns struct {
		result1 error
	}
	checkDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, string, ...kore.DeleteOptionFunc) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []kore.DeleteOptionFunc
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	ExistsStub        func(context.Context, string) (bool, error)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	existsReturns struct {
		result1 bool
		result2 error
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GenerateTeamIdentifierStub        func(context.Context, string) (string, error)
	generateTeamIdentifierMutex       sync.RWMutex
	generateTeamIdentifierArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	generateTeamIdentifierReturns struct {
		result1 string
		result2 error
	}
	generateTeamIdentifierReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetStub        func(context.Context, string) (*v1.Team, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *v1.Team
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1.Team
		result2 error
	}
	ListStub        func(context.Context) (*v1.TeamList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 *v1.TeamList
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *v1.TeamList
		result2 error
	}
	TeamStub        func(string) kore.Team
	teamMutex       sync.RWMutex
	teamArgsForCall []struct {
		arg1 string
	}
	teamReturns struct {
		result1 kore.Team
	}
	teamReturnsOnCall map[int]struct {
		result1 kore.Team
	}
	UpdateStub        func(context.Context, *v1.Team) (*v1.Team, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *v1.Team
	}
	updateReturns struct {
		result1 *v1.Team
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *v1.Team
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTeams) CheckDelete(arg1 context.Context, arg2 *v1.Team, arg3 ...kore.DeleteOptionFunc) error {
	fake.checkDeleteMutex.Lock()
	ret, specificReturn := fake.checkDeleteReturnsOnCall[len(fake.checkDeleteArgsForCall)]
	fake.checkDeleteArgsForCall = append(fake.checkDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.Team
		arg3 []kore.DeleteOptionFunc
	}{arg1, arg2, arg3})
	fake.recordInvocation("CheckDelete", []interface{}{arg1, arg2, arg3})
	fake.checkDeleteMutex.Unlock()
	if fake.CheckDeleteStub != nil {
		return fake.CheckDeleteStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkDeleteReturns
	return fakeReturns.result1
}

func (fake *FakeTeams) CheckDeleteCallCount() int {
	fake.checkDeleteMutex.RLock()
	defer fake.checkDeleteMutex.RUnlock()
	return len(fake.checkDeleteArgsForCall)
}

func (fake *FakeTeams) CheckDeleteCalls(stub func(context.Context, *v1.Team, ...kore.DeleteOptionFunc) error) {
	fake.checkDeleteMutex.Lock()
	defer fake.checkDeleteMutex.Unlock()
	fake.CheckDeleteStub = stub
}

func (fake *FakeTeams) CheckDeleteArgsForCall(i int) (context.Context, *v1.Team, []kore.DeleteOptionFunc) {
	fake.checkDeleteMutex.RLock()
	defer fake.checkDeleteMutex.RUnlock()
	argsForCall := fake.checkDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTeams) CheckDeleteReturns(result1 error) {
	fake.checkDeleteMutex.Lock()
	defer fake.checkDeleteMutex.Unlock()
	fake.CheckDeleteStub = nil
	fake.checkDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeams) CheckDeleteReturnsOnCall(i int, result1 error) {
	fake.checkDeleteMutex.Lock()
	defer fake.checkDeleteMutex.Unlock()
	fake.CheckDeleteStub = nil
	if fake.checkDeleteReturnsOnCall == nil {
		fake.checkDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeams) Delete(arg1 context.Context, arg2 string, arg3 ...kore.DeleteOptionFunc) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []kore.DeleteOptionFunc
	}{arg1, arg2, arg3})
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *FakeTeams) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeTeams) DeleteCalls(stub func(context.Context, string, ...kore.DeleteOptionFunc) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeTeams) DeleteArgsForCall(i int) (context.Context, string, []kore.DeleteOptionFunc) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTeams) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeams) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTeams) Exists(arg1 context.Context, arg2 string) (bool, error) {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Exists", []interface{}{arg1, arg2})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.existsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTeams) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeTeams) ExistsCalls(stub func(context.Context, string) (bool, error)) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeTeams) ExistsArgsForCall(i int) (context.Context, string) {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTeams) ExistsReturns(result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) ExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) GenerateTeamIdentifier(arg1 context.Context, arg2 string) (string, error) {
	fake.generateTeamIdentifierMutex.Lock()
	ret, specificReturn := fake.generateTeamIdentifierReturnsOnCall[len(fake.generateTeamIdentifierArgsForCall)]
	fake.generateTeamIdentifierArgsForCall = append(fake.generateTeamIdentifierArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GenerateTeamIdentifier", []interface{}{arg1, arg2})
	fake.generateTeamIdentifierMutex.Unlock()
	if fake.GenerateTeamIdentifierStub != nil {
		return fake.GenerateTeamIdentifierStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateTeamIdentifierReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTeams) GenerateTeamIdentifierCallCount() int {
	fake.generateTeamIdentifierMutex.RLock()
	defer fake.generateTeamIdentifierMutex.RUnlock()
	return len(fake.generateTeamIdentifierArgsForCall)
}

func (fake *FakeTeams) GenerateTeamIdentifierCalls(stub func(context.Context, string) (string, error)) {
	fake.generateTeamIdentifierMutex.Lock()
	defer fake.generateTeamIdentifierMutex.Unlock()
	fake.GenerateTeamIdentifierStub = stub
}

func (fake *FakeTeams) GenerateTeamIdentifierArgsForCall(i int) (context.Context, string) {
	fake.generateTeamIdentifierMutex.RLock()
	defer fake.generateTeamIdentifierMutex.RUnlock()
	argsForCall := fake.generateTeamIdentifierArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTeams) GenerateTeamIdentifierReturns(result1 string, result2 error) {
	fake.generateTeamIdentifierMutex.Lock()
	defer fake.generateTeamIdentifierMutex.Unlock()
	fake.GenerateTeamIdentifierStub = nil
	fake.generateTeamIdentifierReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) GenerateTeamIdentifierReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateTeamIdentifierMutex.Lock()
	defer fake.generateTeamIdentifierMutex.Unlock()
	fake.GenerateTeamIdentifierStub = nil
	if fake.generateTeamIdentifierReturnsOnCall == nil {
		fake.generateTeamIdentifierReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateTeamIdentifierReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) Get(arg1 context.Context, arg2 string) (*v1.Team, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTeams) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeTeams) GetCalls(stub func(context.Context, string) (*v1.Team, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeTeams) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTeams) GetReturns(result1 *v1.Team, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) GetReturnsOnCall(i int, result1 *v1.Team, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1.Team
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) List(arg1 context.Context) (*v1.TeamList, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTeams) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeTeams) ListCalls(stub func(context.Context) (*v1.TeamList, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeTeams) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTeams) ListReturns(result1 *v1.TeamList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *v1.TeamList
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) ListReturnsOnCall(i int, result1 *v1.TeamList, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *v1.TeamList
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *v1.TeamList
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) Team(arg1 string) kore.Team {
	fake.teamMutex.Lock()
	ret, specificReturn := fake.teamReturnsOnCall[len(fake.teamArgsForCall)]
	fake.teamArgsForCall = append(fake.teamArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Team", []interface{}{arg1})
	fake.teamMutex.Unlock()
	if fake.TeamStub != nil {
		return fake.TeamStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.teamReturns
	return fakeReturns.result1
}

func (fake *FakeTeams) TeamCallCount() int {
	fake.teamMutex.RLock()
	defer fake.teamMutex.RUnlock()
	return len(fake.teamArgsForCall)
}

func (fake *FakeTeams) TeamCalls(stub func(string) kore.Team) {
	fake.teamMutex.Lock()
	defer fake.teamMutex.Unlock()
	fake.TeamStub = stub
}

func (fake *FakeTeams) TeamArgsForCall(i int) string {
	fake.teamMutex.RLock()
	defer fake.teamMutex.RUnlock()
	argsForCall := fake.teamArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTeams) TeamReturns(result1 kore.Team) {
	fake.teamMutex.Lock()
	defer fake.teamMutex.Unlock()
	fake.TeamStub = nil
	fake.teamReturns = struct {
		result1 kore.Team
	}{result1}
}

func (fake *FakeTeams) TeamReturnsOnCall(i int, result1 kore.Team) {
	fake.teamMutex.Lock()
	defer fake.teamMutex.Unlock()
	fake.TeamStub = nil
	if fake.teamReturnsOnCall == nil {
		fake.teamReturnsOnCall = make(map[int]struct {
			result1 kore.Team
		})
	}
	fake.teamReturnsOnCall[i] = struct {
		result1 kore.Team
	}{result1}
}

func (fake *FakeTeams) Update(arg1 context.Context, arg2 *v1.Team) (*v1.Team, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *v1.Team
	}{arg1, arg2})
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTeams) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeTeams) UpdateCalls(stub func(context.Context, *v1.Team) (*v1.Team, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeTeams) UpdateArgsForCall(i int) (context.Context, *v1.Team) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTeams) UpdateReturns(result1 *v1.Team, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *v1.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) UpdateReturnsOnCall(i int, result1 *v1.Team, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *v1.Team
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *v1.Team
		result2 error
	}{result1, result2}
}

func (fake *FakeTeams) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkDeleteMutex.RLock()
	defer fake.checkDeleteMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.generateTeamIdentifierMutex.RLock()
	defer fake.generateTeamIdentifierMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.teamMutex.RLock()
	defer fake.teamMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTeams) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kore.Teams = new(FakeTeams)
