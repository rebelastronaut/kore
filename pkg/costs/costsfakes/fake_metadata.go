// Code generated by counterfeiter. DO NOT EDIT.
package costsfakes

import (
	"sync"

	"github.com/appvia/kore/pkg/apis/costs/v1beta1"
	"github.com/appvia/kore/pkg/costs"
)

type FakeMetadata struct {
	CloudsStub        func() ([]string, error)
	cloudsMutex       sync.RWMutex
	cloudsArgsForCall []struct {
	}
	cloudsReturns struct {
		result1 []string
		result2 error
	}
	cloudsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	InstanceTypeStub        func(string, string, string) (*v1beta1.InstanceType, error)
	instanceTypeMutex       sync.RWMutex
	instanceTypeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	instanceTypeReturns struct {
		result1 *v1beta1.InstanceType
		result2 error
	}
	instanceTypeReturnsOnCall map[int]struct {
		result1 *v1beta1.InstanceType
		result2 error
	}
	InstanceTypesStub        func(string, string) (*v1beta1.InstanceTypeList, error)
	instanceTypesMutex       sync.RWMutex
	instanceTypesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	instanceTypesReturns struct {
		result1 *v1beta1.InstanceTypeList
		result2 error
	}
	instanceTypesReturnsOnCall map[int]struct {
		result1 *v1beta1.InstanceTypeList
		result2 error
	}
	KubernetesControlPlaneCostStub        func(string, string) (int64, error)
	kubernetesControlPlaneCostMutex       sync.RWMutex
	kubernetesControlPlaneCostArgsForCall []struct {
		arg1 string
		arg2 string
	}
	kubernetesControlPlaneCostReturns struct {
		result1 int64
		result2 error
	}
	kubernetesControlPlaneCostReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	KubernetesExposedServiceCostStub        func(string, string) (int64, error)
	kubernetesExposedServiceCostMutex       sync.RWMutex
	kubernetesExposedServiceCostArgsForCall []struct {
		arg1 string
		arg2 string
	}
	kubernetesExposedServiceCostReturns struct {
		result1 int64
		result2 error
	}
	kubernetesExposedServiceCostReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	KubernetesVersionsStub        func(string, string) ([]string, error)
	kubernetesVersionsMutex       sync.RWMutex
	kubernetesVersionsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	kubernetesVersionsReturns struct {
		result1 []string
		result2 error
	}
	kubernetesVersionsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	MapProviderToCloudStub        func(string) (string, error)
	mapProviderToCloudMutex       sync.RWMutex
	mapProviderToCloudArgsForCall []struct {
		arg1 string
	}
	mapProviderToCloudReturns struct {
		result1 string
		result2 error
	}
	mapProviderToCloudReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RegionZonesStub        func(string, string) ([]string, error)
	regionZonesMutex       sync.RWMutex
	regionZonesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	regionZonesReturns struct {
		result1 []string
		result2 error
	}
	regionZonesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	RegionsStub        func(string) (*v1beta1.ContinentList, error)
	regionsMutex       sync.RWMutex
	regionsArgsForCall []struct {
		arg1 string
	}
	regionsReturns struct {
		result1 *v1beta1.ContinentList
		result2 error
	}
	regionsReturnsOnCall map[int]struct {
		result1 *v1beta1.ContinentList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetadata) Clouds() ([]string, error) {
	fake.cloudsMutex.Lock()
	ret, specificReturn := fake.cloudsReturnsOnCall[len(fake.cloudsArgsForCall)]
	fake.cloudsArgsForCall = append(fake.cloudsArgsForCall, struct {
	}{})
	fake.recordInvocation("Clouds", []interface{}{})
	fake.cloudsMutex.Unlock()
	if fake.CloudsStub != nil {
		return fake.CloudsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cloudsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) CloudsCallCount() int {
	fake.cloudsMutex.RLock()
	defer fake.cloudsMutex.RUnlock()
	return len(fake.cloudsArgsForCall)
}

func (fake *FakeMetadata) CloudsCalls(stub func() ([]string, error)) {
	fake.cloudsMutex.Lock()
	defer fake.cloudsMutex.Unlock()
	fake.CloudsStub = stub
}

func (fake *FakeMetadata) CloudsReturns(result1 []string, result2 error) {
	fake.cloudsMutex.Lock()
	defer fake.cloudsMutex.Unlock()
	fake.CloudsStub = nil
	fake.cloudsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) CloudsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.cloudsMutex.Lock()
	defer fake.cloudsMutex.Unlock()
	fake.CloudsStub = nil
	if fake.cloudsReturnsOnCall == nil {
		fake.cloudsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.cloudsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) InstanceType(arg1 string, arg2 string, arg3 string) (*v1beta1.InstanceType, error) {
	fake.instanceTypeMutex.Lock()
	ret, specificReturn := fake.instanceTypeReturnsOnCall[len(fake.instanceTypeArgsForCall)]
	fake.instanceTypeArgsForCall = append(fake.instanceTypeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("InstanceType", []interface{}{arg1, arg2, arg3})
	fake.instanceTypeMutex.Unlock()
	if fake.InstanceTypeStub != nil {
		return fake.InstanceTypeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.instanceTypeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) InstanceTypeCallCount() int {
	fake.instanceTypeMutex.RLock()
	defer fake.instanceTypeMutex.RUnlock()
	return len(fake.instanceTypeArgsForCall)
}

func (fake *FakeMetadata) InstanceTypeCalls(stub func(string, string, string) (*v1beta1.InstanceType, error)) {
	fake.instanceTypeMutex.Lock()
	defer fake.instanceTypeMutex.Unlock()
	fake.InstanceTypeStub = stub
}

func (fake *FakeMetadata) InstanceTypeArgsForCall(i int) (string, string, string) {
	fake.instanceTypeMutex.RLock()
	defer fake.instanceTypeMutex.RUnlock()
	argsForCall := fake.instanceTypeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetadata) InstanceTypeReturns(result1 *v1beta1.InstanceType, result2 error) {
	fake.instanceTypeMutex.Lock()
	defer fake.instanceTypeMutex.Unlock()
	fake.InstanceTypeStub = nil
	fake.instanceTypeReturns = struct {
		result1 *v1beta1.InstanceType
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) InstanceTypeReturnsOnCall(i int, result1 *v1beta1.InstanceType, result2 error) {
	fake.instanceTypeMutex.Lock()
	defer fake.instanceTypeMutex.Unlock()
	fake.InstanceTypeStub = nil
	if fake.instanceTypeReturnsOnCall == nil {
		fake.instanceTypeReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.InstanceType
			result2 error
		})
	}
	fake.instanceTypeReturnsOnCall[i] = struct {
		result1 *v1beta1.InstanceType
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) InstanceTypes(arg1 string, arg2 string) (*v1beta1.InstanceTypeList, error) {
	fake.instanceTypesMutex.Lock()
	ret, specificReturn := fake.instanceTypesReturnsOnCall[len(fake.instanceTypesArgsForCall)]
	fake.instanceTypesArgsForCall = append(fake.instanceTypesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("InstanceTypes", []interface{}{arg1, arg2})
	fake.instanceTypesMutex.Unlock()
	if fake.InstanceTypesStub != nil {
		return fake.InstanceTypesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.instanceTypesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) InstanceTypesCallCount() int {
	fake.instanceTypesMutex.RLock()
	defer fake.instanceTypesMutex.RUnlock()
	return len(fake.instanceTypesArgsForCall)
}

func (fake *FakeMetadata) InstanceTypesCalls(stub func(string, string) (*v1beta1.InstanceTypeList, error)) {
	fake.instanceTypesMutex.Lock()
	defer fake.instanceTypesMutex.Unlock()
	fake.InstanceTypesStub = stub
}

func (fake *FakeMetadata) InstanceTypesArgsForCall(i int) (string, string) {
	fake.instanceTypesMutex.RLock()
	defer fake.instanceTypesMutex.RUnlock()
	argsForCall := fake.instanceTypesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadata) InstanceTypesReturns(result1 *v1beta1.InstanceTypeList, result2 error) {
	fake.instanceTypesMutex.Lock()
	defer fake.instanceTypesMutex.Unlock()
	fake.InstanceTypesStub = nil
	fake.instanceTypesReturns = struct {
		result1 *v1beta1.InstanceTypeList
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) InstanceTypesReturnsOnCall(i int, result1 *v1beta1.InstanceTypeList, result2 error) {
	fake.instanceTypesMutex.Lock()
	defer fake.instanceTypesMutex.Unlock()
	fake.InstanceTypesStub = nil
	if fake.instanceTypesReturnsOnCall == nil {
		fake.instanceTypesReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.InstanceTypeList
			result2 error
		})
	}
	fake.instanceTypesReturnsOnCall[i] = struct {
		result1 *v1beta1.InstanceTypeList
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesControlPlaneCost(arg1 string, arg2 string) (int64, error) {
	fake.kubernetesControlPlaneCostMutex.Lock()
	ret, specificReturn := fake.kubernetesControlPlaneCostReturnsOnCall[len(fake.kubernetesControlPlaneCostArgsForCall)]
	fake.kubernetesControlPlaneCostArgsForCall = append(fake.kubernetesControlPlaneCostArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("KubernetesControlPlaneCost", []interface{}{arg1, arg2})
	fake.kubernetesControlPlaneCostMutex.Unlock()
	if fake.KubernetesControlPlaneCostStub != nil {
		return fake.KubernetesControlPlaneCostStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.kubernetesControlPlaneCostReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) KubernetesControlPlaneCostCallCount() int {
	fake.kubernetesControlPlaneCostMutex.RLock()
	defer fake.kubernetesControlPlaneCostMutex.RUnlock()
	return len(fake.kubernetesControlPlaneCostArgsForCall)
}

func (fake *FakeMetadata) KubernetesControlPlaneCostCalls(stub func(string, string) (int64, error)) {
	fake.kubernetesControlPlaneCostMutex.Lock()
	defer fake.kubernetesControlPlaneCostMutex.Unlock()
	fake.KubernetesControlPlaneCostStub = stub
}

func (fake *FakeMetadata) KubernetesControlPlaneCostArgsForCall(i int) (string, string) {
	fake.kubernetesControlPlaneCostMutex.RLock()
	defer fake.kubernetesControlPlaneCostMutex.RUnlock()
	argsForCall := fake.kubernetesControlPlaneCostArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadata) KubernetesControlPlaneCostReturns(result1 int64, result2 error) {
	fake.kubernetesControlPlaneCostMutex.Lock()
	defer fake.kubernetesControlPlaneCostMutex.Unlock()
	fake.KubernetesControlPlaneCostStub = nil
	fake.kubernetesControlPlaneCostReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesControlPlaneCostReturnsOnCall(i int, result1 int64, result2 error) {
	fake.kubernetesControlPlaneCostMutex.Lock()
	defer fake.kubernetesControlPlaneCostMutex.Unlock()
	fake.KubernetesControlPlaneCostStub = nil
	if fake.kubernetesControlPlaneCostReturnsOnCall == nil {
		fake.kubernetesControlPlaneCostReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.kubernetesControlPlaneCostReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesExposedServiceCost(arg1 string, arg2 string) (int64, error) {
	fake.kubernetesExposedServiceCostMutex.Lock()
	ret, specificReturn := fake.kubernetesExposedServiceCostReturnsOnCall[len(fake.kubernetesExposedServiceCostArgsForCall)]
	fake.kubernetesExposedServiceCostArgsForCall = append(fake.kubernetesExposedServiceCostArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("KubernetesExposedServiceCost", []interface{}{arg1, arg2})
	fake.kubernetesExposedServiceCostMutex.Unlock()
	if fake.KubernetesExposedServiceCostStub != nil {
		return fake.KubernetesExposedServiceCostStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.kubernetesExposedServiceCostReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) KubernetesExposedServiceCostCallCount() int {
	fake.kubernetesExposedServiceCostMutex.RLock()
	defer fake.kubernetesExposedServiceCostMutex.RUnlock()
	return len(fake.kubernetesExposedServiceCostArgsForCall)
}

func (fake *FakeMetadata) KubernetesExposedServiceCostCalls(stub func(string, string) (int64, error)) {
	fake.kubernetesExposedServiceCostMutex.Lock()
	defer fake.kubernetesExposedServiceCostMutex.Unlock()
	fake.KubernetesExposedServiceCostStub = stub
}

func (fake *FakeMetadata) KubernetesExposedServiceCostArgsForCall(i int) (string, string) {
	fake.kubernetesExposedServiceCostMutex.RLock()
	defer fake.kubernetesExposedServiceCostMutex.RUnlock()
	argsForCall := fake.kubernetesExposedServiceCostArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadata) KubernetesExposedServiceCostReturns(result1 int64, result2 error) {
	fake.kubernetesExposedServiceCostMutex.Lock()
	defer fake.kubernetesExposedServiceCostMutex.Unlock()
	fake.KubernetesExposedServiceCostStub = nil
	fake.kubernetesExposedServiceCostReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesExposedServiceCostReturnsOnCall(i int, result1 int64, result2 error) {
	fake.kubernetesExposedServiceCostMutex.Lock()
	defer fake.kubernetesExposedServiceCostMutex.Unlock()
	fake.KubernetesExposedServiceCostStub = nil
	if fake.kubernetesExposedServiceCostReturnsOnCall == nil {
		fake.kubernetesExposedServiceCostReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.kubernetesExposedServiceCostReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesVersions(arg1 string, arg2 string) ([]string, error) {
	fake.kubernetesVersionsMutex.Lock()
	ret, specificReturn := fake.kubernetesVersionsReturnsOnCall[len(fake.kubernetesVersionsArgsForCall)]
	fake.kubernetesVersionsArgsForCall = append(fake.kubernetesVersionsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("KubernetesVersions", []interface{}{arg1, arg2})
	fake.kubernetesVersionsMutex.Unlock()
	if fake.KubernetesVersionsStub != nil {
		return fake.KubernetesVersionsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.kubernetesVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) KubernetesVersionsCallCount() int {
	fake.kubernetesVersionsMutex.RLock()
	defer fake.kubernetesVersionsMutex.RUnlock()
	return len(fake.kubernetesVersionsArgsForCall)
}

func (fake *FakeMetadata) KubernetesVersionsCalls(stub func(string, string) ([]string, error)) {
	fake.kubernetesVersionsMutex.Lock()
	defer fake.kubernetesVersionsMutex.Unlock()
	fake.KubernetesVersionsStub = stub
}

func (fake *FakeMetadata) KubernetesVersionsArgsForCall(i int) (string, string) {
	fake.kubernetesVersionsMutex.RLock()
	defer fake.kubernetesVersionsMutex.RUnlock()
	argsForCall := fake.kubernetesVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadata) KubernetesVersionsReturns(result1 []string, result2 error) {
	fake.kubernetesVersionsMutex.Lock()
	defer fake.kubernetesVersionsMutex.Unlock()
	fake.KubernetesVersionsStub = nil
	fake.kubernetesVersionsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) KubernetesVersionsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.kubernetesVersionsMutex.Lock()
	defer fake.kubernetesVersionsMutex.Unlock()
	fake.KubernetesVersionsStub = nil
	if fake.kubernetesVersionsReturnsOnCall == nil {
		fake.kubernetesVersionsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.kubernetesVersionsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) MapProviderToCloud(arg1 string) (string, error) {
	fake.mapProviderToCloudMutex.Lock()
	ret, specificReturn := fake.mapProviderToCloudReturnsOnCall[len(fake.mapProviderToCloudArgsForCall)]
	fake.mapProviderToCloudArgsForCall = append(fake.mapProviderToCloudArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("MapProviderToCloud", []interface{}{arg1})
	fake.mapProviderToCloudMutex.Unlock()
	if fake.MapProviderToCloudStub != nil {
		return fake.MapProviderToCloudStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.mapProviderToCloudReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) MapProviderToCloudCallCount() int {
	fake.mapProviderToCloudMutex.RLock()
	defer fake.mapProviderToCloudMutex.RUnlock()
	return len(fake.mapProviderToCloudArgsForCall)
}

func (fake *FakeMetadata) MapProviderToCloudCalls(stub func(string) (string, error)) {
	fake.mapProviderToCloudMutex.Lock()
	defer fake.mapProviderToCloudMutex.Unlock()
	fake.MapProviderToCloudStub = stub
}

func (fake *FakeMetadata) MapProviderToCloudArgsForCall(i int) string {
	fake.mapProviderToCloudMutex.RLock()
	defer fake.mapProviderToCloudMutex.RUnlock()
	argsForCall := fake.mapProviderToCloudArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetadata) MapProviderToCloudReturns(result1 string, result2 error) {
	fake.mapProviderToCloudMutex.Lock()
	defer fake.mapProviderToCloudMutex.Unlock()
	fake.MapProviderToCloudStub = nil
	fake.mapProviderToCloudReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) MapProviderToCloudReturnsOnCall(i int, result1 string, result2 error) {
	fake.mapProviderToCloudMutex.Lock()
	defer fake.mapProviderToCloudMutex.Unlock()
	fake.MapProviderToCloudStub = nil
	if fake.mapProviderToCloudReturnsOnCall == nil {
		fake.mapProviderToCloudReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.mapProviderToCloudReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) RegionZones(arg1 string, arg2 string) ([]string, error) {
	fake.regionZonesMutex.Lock()
	ret, specificReturn := fake.regionZonesReturnsOnCall[len(fake.regionZonesArgsForCall)]
	fake.regionZonesArgsForCall = append(fake.regionZonesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RegionZones", []interface{}{arg1, arg2})
	fake.regionZonesMutex.Unlock()
	if fake.RegionZonesStub != nil {
		return fake.RegionZonesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.regionZonesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) RegionZonesCallCount() int {
	fake.regionZonesMutex.RLock()
	defer fake.regionZonesMutex.RUnlock()
	return len(fake.regionZonesArgsForCall)
}

func (fake *FakeMetadata) RegionZonesCalls(stub func(string, string) ([]string, error)) {
	fake.regionZonesMutex.Lock()
	defer fake.regionZonesMutex.Unlock()
	fake.RegionZonesStub = stub
}

func (fake *FakeMetadata) RegionZonesArgsForCall(i int) (string, string) {
	fake.regionZonesMutex.RLock()
	defer fake.regionZonesMutex.RUnlock()
	argsForCall := fake.regionZonesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMetadata) RegionZonesReturns(result1 []string, result2 error) {
	fake.regionZonesMutex.Lock()
	defer fake.regionZonesMutex.Unlock()
	fake.RegionZonesStub = nil
	fake.regionZonesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) RegionZonesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.regionZonesMutex.Lock()
	defer fake.regionZonesMutex.Unlock()
	fake.RegionZonesStub = nil
	if fake.regionZonesReturnsOnCall == nil {
		fake.regionZonesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.regionZonesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) Regions(arg1 string) (*v1beta1.ContinentList, error) {
	fake.regionsMutex.Lock()
	ret, specificReturn := fake.regionsReturnsOnCall[len(fake.regionsArgsForCall)]
	fake.regionsArgsForCall = append(fake.regionsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Regions", []interface{}{arg1})
	fake.regionsMutex.Unlock()
	if fake.RegionsStub != nil {
		return fake.RegionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.regionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadata) RegionsCallCount() int {
	fake.regionsMutex.RLock()
	defer fake.regionsMutex.RUnlock()
	return len(fake.regionsArgsForCall)
}

func (fake *FakeMetadata) RegionsCalls(stub func(string) (*v1beta1.ContinentList, error)) {
	fake.regionsMutex.Lock()
	defer fake.regionsMutex.Unlock()
	fake.RegionsStub = stub
}

func (fake *FakeMetadata) RegionsArgsForCall(i int) string {
	fake.regionsMutex.RLock()
	defer fake.regionsMutex.RUnlock()
	argsForCall := fake.regionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetadata) RegionsReturns(result1 *v1beta1.ContinentList, result2 error) {
	fake.regionsMutex.Lock()
	defer fake.regionsMutex.Unlock()
	fake.RegionsStub = nil
	fake.regionsReturns = struct {
		result1 *v1beta1.ContinentList
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) RegionsReturnsOnCall(i int, result1 *v1beta1.ContinentList, result2 error) {
	fake.regionsMutex.Lock()
	defer fake.regionsMutex.Unlock()
	fake.RegionsStub = nil
	if fake.regionsReturnsOnCall == nil {
		fake.regionsReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ContinentList
			result2 error
		})
	}
	fake.regionsReturnsOnCall[i] = struct {
		result1 *v1beta1.ContinentList
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadata) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudsMutex.RLock()
	defer fake.cloudsMutex.RUnlock()
	fake.instanceTypeMutex.RLock()
	defer fake.instanceTypeMutex.RUnlock()
	fake.instanceTypesMutex.RLock()
	defer fake.instanceTypesMutex.RUnlock()
	fake.kubernetesControlPlaneCostMutex.RLock()
	defer fake.kubernetesControlPlaneCostMutex.RUnlock()
	fake.kubernetesExposedServiceCostMutex.RLock()
	defer fake.kubernetesExposedServiceCostMutex.RUnlock()
	fake.kubernetesVersionsMutex.RLock()
	defer fake.kubernetesVersionsMutex.RUnlock()
	fake.mapProviderToCloudMutex.RLock()
	defer fake.mapProviderToCloudMutex.RUnlock()
	fake.regionZonesMutex.RLock()
	defer fake.regionZonesMutex.RUnlock()
	fake.regionsMutex.RLock()
	defer fake.regionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetadata) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ costs.Metadata = new(FakeMetadata)
