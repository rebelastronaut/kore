// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// UpdateServiceCatalogReader is a Reader for the UpdateServiceCatalog structure.
type UpdateServiceCatalogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceCatalogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceCatalogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceCatalogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateServiceCatalogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateServiceCatalogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateServiceCatalogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceCatalogOK creates a UpdateServiceCatalogOK with default headers values
func NewUpdateServiceCatalogOK() *UpdateServiceCatalogOK {
	return &UpdateServiceCatalogOK{}
}

/*UpdateServiceCatalogOK handles this case with default header values.

Contains the service catalog definition
*/
type UpdateServiceCatalogOK struct {
	Payload *models.V1ServiceCatalog
}

func (o *UpdateServiceCatalogOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/servicecatalogs/{name}][%d] updateServiceCatalogOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceCatalogOK) GetPayload() *models.V1ServiceCatalog {
	return o.Payload
}

func (o *UpdateServiceCatalogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1ServiceCatalog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogBadRequest creates a UpdateServiceCatalogBadRequest with default headers values
func NewUpdateServiceCatalogBadRequest() *UpdateServiceCatalogBadRequest {
	return &UpdateServiceCatalogBadRequest{}
}

/*UpdateServiceCatalogBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type UpdateServiceCatalogBadRequest struct {
	Payload *models.ValidationError
}

func (o *UpdateServiceCatalogBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/servicecatalogs/{name}][%d] updateServiceCatalogBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceCatalogBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *UpdateServiceCatalogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogUnauthorized creates a UpdateServiceCatalogUnauthorized with default headers values
func NewUpdateServiceCatalogUnauthorized() *UpdateServiceCatalogUnauthorized {
	return &UpdateServiceCatalogUnauthorized{}
}

/*UpdateServiceCatalogUnauthorized handles this case with default header values.

If not authenticated
*/
type UpdateServiceCatalogUnauthorized struct {
}

func (o *UpdateServiceCatalogUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/servicecatalogs/{name}][%d] updateServiceCatalogUnauthorized ", 401)
}

func (o *UpdateServiceCatalogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceCatalogForbidden creates a UpdateServiceCatalogForbidden with default headers values
func NewUpdateServiceCatalogForbidden() *UpdateServiceCatalogForbidden {
	return &UpdateServiceCatalogForbidden{}
}

/*UpdateServiceCatalogForbidden handles this case with default header values.

If authenticated but not authorized
*/
type UpdateServiceCatalogForbidden struct {
}

func (o *UpdateServiceCatalogForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/servicecatalogs/{name}][%d] updateServiceCatalogForbidden ", 403)
}

func (o *UpdateServiceCatalogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceCatalogInternalServerError creates a UpdateServiceCatalogInternalServerError with default headers values
func NewUpdateServiceCatalogInternalServerError() *UpdateServiceCatalogInternalServerError {
	return &UpdateServiceCatalogInternalServerError{}
}

/*UpdateServiceCatalogInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type UpdateServiceCatalogInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *UpdateServiceCatalogInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1alpha1/servicecatalogs/{name}][%d] updateServiceCatalogInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServiceCatalogInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *UpdateServiceCatalogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
