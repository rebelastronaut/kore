// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListAWSAccountOUsParams creates a new ListAWSAccountOUsParams object
// with the default values initialized.
func NewListAWSAccountOUsParams() *ListAWSAccountOUsParams {
	var ()
	return &ListAWSAccountOUsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAWSAccountOUsParamsWithTimeout creates a new ListAWSAccountOUsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAWSAccountOUsParamsWithTimeout(timeout time.Duration) *ListAWSAccountOUsParams {
	var ()
	return &ListAWSAccountOUsParams{

		timeout: timeout,
	}
}

// NewListAWSAccountOUsParamsWithContext creates a new ListAWSAccountOUsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAWSAccountOUsParamsWithContext(ctx context.Context) *ListAWSAccountOUsParams {
	var ()
	return &ListAWSAccountOUsParams{

		Context: ctx,
	}
}

// NewListAWSAccountOUsParamsWithHTTPClient creates a new ListAWSAccountOUsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAWSAccountOUsParamsWithHTTPClient(client *http.Client) *ListAWSAccountOUsParams {
	var ()
	return &ListAWSAccountOUsParams{
		HTTPClient: client,
	}
}

/*ListAWSAccountOUsParams contains all the parameters to send to the API endpoint
for the list a w s account o us operation typically these are written to a http.Request
*/
type ListAWSAccountOUsParams struct {

	/*Region
	  Is the region where Control Tower and AWS Organizations are enabled

	*/
	Region *string
	/*RoleARN
	  Is the role in the master account to use for querying the Organization

	*/
	RoleARN *string
	/*Team
	  Is the name of the team you are acting within

	*/
	Team string
	/*XAPIAwsAccessKeyID
	  Is the AWS Access Key ID used for authenticating to the AWS API

	*/
	XAPIAwsAccessKeyID *string
	/*XAPIAwsSecretAccessKey
	  Is the AWS Secret Access Key used for authenticating to the AWS API

	*/
	XAPIAwsSecretAccessKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithTimeout(timeout time.Duration) *ListAWSAccountOUsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithContext(ctx context.Context) *ListAWSAccountOUsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithHTTPClient(client *http.Client) *ListAWSAccountOUsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRegion adds the region to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithRegion(region *string) *ListAWSAccountOUsParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetRegion(region *string) {
	o.Region = region
}

// WithRoleARN adds the roleARN to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithRoleARN(roleARN *string) *ListAWSAccountOUsParams {
	o.SetRoleARN(roleARN)
	return o
}

// SetRoleARN adds the roleARN to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetRoleARN(roleARN *string) {
	o.RoleARN = roleARN
}

// WithTeam adds the team to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithTeam(team string) *ListAWSAccountOUsParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetTeam(team string) {
	o.Team = team
}

// WithXAPIAwsAccessKeyID adds the xAPIAwsAccessKeyID to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithXAPIAwsAccessKeyID(xAPIAwsAccessKeyID *string) *ListAWSAccountOUsParams {
	o.SetXAPIAwsAccessKeyID(xAPIAwsAccessKeyID)
	return o
}

// SetXAPIAwsAccessKeyID adds the xApiAwsAccessKeyId to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetXAPIAwsAccessKeyID(xAPIAwsAccessKeyID *string) {
	o.XAPIAwsAccessKeyID = xAPIAwsAccessKeyID
}

// WithXAPIAwsSecretAccessKey adds the xAPIAwsSecretAccessKey to the list a w s account o us params
func (o *ListAWSAccountOUsParams) WithXAPIAwsSecretAccessKey(xAPIAwsSecretAccessKey *string) *ListAWSAccountOUsParams {
	o.SetXAPIAwsSecretAccessKey(xAPIAwsSecretAccessKey)
	return o
}

// SetXAPIAwsSecretAccessKey adds the xApiAwsSecretAccessKey to the list a w s account o us params
func (o *ListAWSAccountOUsParams) SetXAPIAwsSecretAccessKey(xAPIAwsSecretAccessKey *string) {
	o.XAPIAwsSecretAccessKey = xAPIAwsSecretAccessKey
}

// WriteToRequest writes these params to a swagger request
func (o *ListAWSAccountOUsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.RoleARN != nil {

		// query param roleARN
		var qrRoleARN string
		if o.RoleARN != nil {
			qrRoleARN = *o.RoleARN
		}
		qRoleARN := qrRoleARN
		if qRoleARN != "" {
			if err := r.SetQueryParam("roleARN", qRoleARN); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if o.XAPIAwsAccessKeyID != nil {

		// header param x-api-aws-access-key-id
		if err := r.SetHeaderParam("x-api-aws-access-key-id", *o.XAPIAwsAccessKeyID); err != nil {
			return err
		}

	}

	if o.XAPIAwsSecretAccessKey != nil {

		// header param x-api-aws-secret-access-key
		if err := r.SetHeaderParam("x-api-aws-secret-access-key", *o.XAPIAwsSecretAccessKey); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
