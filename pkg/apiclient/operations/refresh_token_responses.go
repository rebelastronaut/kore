// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// RefreshTokenReader is a Reader for the RefreshToken structure.
type RefreshTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRefreshTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRefreshTokenOK creates a RefreshTokenOK with default headers values
func NewRefreshTokenOK() *RefreshTokenOK {
	return &RefreshTokenOK{}
}

/*RefreshTokenOK handles this case with default header values.

An access token which can be used for accessing Kore
*/
type RefreshTokenOK struct {
	Payload *models.TypesIssuedToken
}

func (o *RefreshTokenOK) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/login/token][%d] refreshTokenOK  %+v", 200, o.Payload)
}

func (o *RefreshTokenOK) GetPayload() *models.TypesIssuedToken {
	return o.Payload
}

func (o *RefreshTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TypesIssuedToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshTokenUnauthorized creates a RefreshTokenUnauthorized with default headers values
func NewRefreshTokenUnauthorized() *RefreshTokenUnauthorized {
	return &RefreshTokenUnauthorized{}
}

/*RefreshTokenUnauthorized handles this case with default header values.

If not authenticated
*/
type RefreshTokenUnauthorized struct {
}

func (o *RefreshTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/login/token][%d] refreshTokenUnauthorized ", 401)
}

func (o *RefreshTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshTokenForbidden creates a RefreshTokenForbidden with default headers values
func NewRefreshTokenForbidden() *RefreshTokenForbidden {
	return &RefreshTokenForbidden{}
}

/*RefreshTokenForbidden handles this case with default header values.

If authenticated but not authorized
*/
type RefreshTokenForbidden struct {
}

func (o *RefreshTokenForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/login/token][%d] refreshTokenForbidden ", 403)
}

func (o *RefreshTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshTokenInternalServerError creates a RefreshTokenInternalServerError with default headers values
func NewRefreshTokenInternalServerError() *RefreshTokenInternalServerError {
	return &RefreshTokenInternalServerError{}
}

/*RefreshTokenInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type RefreshTokenInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *RefreshTokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/login/token][%d] refreshTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *RefreshTokenInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *RefreshTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
