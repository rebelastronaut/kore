// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthorizeUserParams creates a new AuthorizeUserParams object
// with the default values initialized.
func NewAuthorizeUserParams() *AuthorizeUserParams {
	var ()
	return &AuthorizeUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorizeUserParamsWithTimeout creates a new AuthorizeUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthorizeUserParamsWithTimeout(timeout time.Duration) *AuthorizeUserParams {
	var ()
	return &AuthorizeUserParams{

		timeout: timeout,
	}
}

// NewAuthorizeUserParamsWithContext creates a new AuthorizeUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewAuthorizeUserParamsWithContext(ctx context.Context) *AuthorizeUserParams {
	var ()
	return &AuthorizeUserParams{

		Context: ctx,
	}
}

// NewAuthorizeUserParamsWithHTTPClient creates a new AuthorizeUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthorizeUserParamsWithHTTPClient(client *http.Client) *AuthorizeUserParams {
	var ()
	return &AuthorizeUserParams{
		HTTPClient: client,
	}
}

/*AuthorizeUserParams contains all the parameters to send to the API endpoint
for the authorize user operation typically these are written to a http.Request
*/
type AuthorizeUserParams struct {

	/*Scopes
	  A list of requested scopes being request

	*/
	Scopes *string
	/*User
	  The username you are trying to authorize

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the authorize user params
func (o *AuthorizeUserParams) WithTimeout(timeout time.Duration) *AuthorizeUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authorize user params
func (o *AuthorizeUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authorize user params
func (o *AuthorizeUserParams) WithContext(ctx context.Context) *AuthorizeUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authorize user params
func (o *AuthorizeUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authorize user params
func (o *AuthorizeUserParams) WithHTTPClient(client *http.Client) *AuthorizeUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authorize user params
func (o *AuthorizeUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScopes adds the scopes to the authorize user params
func (o *AuthorizeUserParams) WithScopes(scopes *string) *AuthorizeUserParams {
	o.SetScopes(scopes)
	return o
}

// SetScopes adds the scopes to the authorize user params
func (o *AuthorizeUserParams) SetScopes(scopes *string) {
	o.Scopes = scopes
}

// WithUser adds the user to the authorize user params
func (o *AuthorizeUserParams) WithUser(user string) *AuthorizeUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the authorize user params
func (o *AuthorizeUserParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorizeUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Scopes != nil {

		// query param scopes
		var qrScopes string
		if o.Scopes != nil {
			qrScopes = *o.Scopes
		}
		qScopes := qrScopes
		if qScopes != "" {
			if err := r.SetQueryParam("scopes", qScopes); err != nil {
				return err
			}
		}

	}

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
