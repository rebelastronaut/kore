// Code generated by go-swagger; DO NOT EDIT.

package costestimates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new costestimates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for costestimates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EstimateClusterPlanCost(params *EstimateClusterPlanCostParams, authInfo runtime.ClientAuthInfoWriter) (*EstimateClusterPlanCostOK, error)

	EstimateServicePlanCost(params *EstimateServicePlanCostParams, authInfo runtime.ClientAuthInfoWriter) (*EstimateServicePlanCostOK, error)

	GetMetadataInstances(params *GetMetadataInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataInstancesOK, error)

	GetMetadataRegions(params *GetMetadataRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataRegionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EstimateClusterPlanCost returns the estimated cost of the supplied cluster plan
*/
func (a *Client) EstimateClusterPlanCost(params *EstimateClusterPlanCostParams, authInfo runtime.ClientAuthInfoWriter) (*EstimateClusterPlanCostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEstimateClusterPlanCostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EstimateClusterPlanCost",
		Method:             "POST",
		PathPattern:        "/api/v1alpha1/costestimates/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EstimateClusterPlanCostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EstimateClusterPlanCostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EstimateClusterPlanCost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EstimateServicePlanCost returns the estimated cost of the supplied service plan
*/
func (a *Client) EstimateServicePlanCost(params *EstimateServicePlanCostParams, authInfo runtime.ClientAuthInfoWriter) (*EstimateServicePlanCostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEstimateServicePlanCostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EstimateServicePlanCost",
		Method:             "POST",
		PathPattern:        "/api/v1alpha1/costestimates/service",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EstimateServicePlanCostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EstimateServicePlanCostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EstimateServicePlanCost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMetadataInstances returns prices and instance types for a given region of a given cloud provider
*/
func (a *Client) GetMetadataInstances(params *GetMetadataInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetadataInstances",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/costestimates/metadata/{cloud}/regions/{region}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMetadataInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMetadataRegions returns regions
*/
func (a *Client) GetMetadataRegions(params *GetMetadataRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetadataRegions",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/costestimates/metadata/{cloud}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMetadataRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
