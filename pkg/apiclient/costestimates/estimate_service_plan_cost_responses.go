// Code generated by go-swagger; DO NOT EDIT.

package costestimates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// EstimateServicePlanCostReader is a Reader for the EstimateServicePlanCost structure.
type EstimateServicePlanCostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EstimateServicePlanCostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEstimateServicePlanCostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEstimateServicePlanCostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEstimateServicePlanCostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEstimateServicePlanCostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEstimateServicePlanCostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEstimateServicePlanCostOK creates a EstimateServicePlanCostOK with default headers values
func NewEstimateServicePlanCostOK() *EstimateServicePlanCostOK {
	return &EstimateServicePlanCostOK{}
}

/*EstimateServicePlanCostOK handles this case with default header values.

An estimate of the costs for the service plan
*/
type EstimateServicePlanCostOK struct {
	Payload *models.V1beta1CostEstimate
}

func (o *EstimateServicePlanCostOK) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/costestimates/service][%d] estimateServicePlanCostOK  %+v", 200, o.Payload)
}

func (o *EstimateServicePlanCostOK) GetPayload() *models.V1beta1CostEstimate {
	return o.Payload
}

func (o *EstimateServicePlanCostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1CostEstimate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateServicePlanCostBadRequest creates a EstimateServicePlanCostBadRequest with default headers values
func NewEstimateServicePlanCostBadRequest() *EstimateServicePlanCostBadRequest {
	return &EstimateServicePlanCostBadRequest{}
}

/*EstimateServicePlanCostBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type EstimateServicePlanCostBadRequest struct {
	Payload *models.ValidationError
}

func (o *EstimateServicePlanCostBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/costestimates/service][%d] estimateServicePlanCostBadRequest  %+v", 400, o.Payload)
}

func (o *EstimateServicePlanCostBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *EstimateServicePlanCostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateServicePlanCostUnauthorized creates a EstimateServicePlanCostUnauthorized with default headers values
func NewEstimateServicePlanCostUnauthorized() *EstimateServicePlanCostUnauthorized {
	return &EstimateServicePlanCostUnauthorized{}
}

/*EstimateServicePlanCostUnauthorized handles this case with default header values.

If not authenticated
*/
type EstimateServicePlanCostUnauthorized struct {
}

func (o *EstimateServicePlanCostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/costestimates/service][%d] estimateServicePlanCostUnauthorized ", 401)
}

func (o *EstimateServicePlanCostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEstimateServicePlanCostForbidden creates a EstimateServicePlanCostForbidden with default headers values
func NewEstimateServicePlanCostForbidden() *EstimateServicePlanCostForbidden {
	return &EstimateServicePlanCostForbidden{}
}

/*EstimateServicePlanCostForbidden handles this case with default header values.

If authenticated but not authorized
*/
type EstimateServicePlanCostForbidden struct {
}

func (o *EstimateServicePlanCostForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/costestimates/service][%d] estimateServicePlanCostForbidden ", 403)
}

func (o *EstimateServicePlanCostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEstimateServicePlanCostInternalServerError creates a EstimateServicePlanCostInternalServerError with default headers values
func NewEstimateServicePlanCostInternalServerError() *EstimateServicePlanCostInternalServerError {
	return &EstimateServicePlanCostInternalServerError{}
}

/*EstimateServicePlanCostInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type EstimateServicePlanCostInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *EstimateServicePlanCostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1alpha1/costestimates/service][%d] estimateServicePlanCostInternalServerError  %+v", 500, o.Payload)
}

func (o *EstimateServicePlanCostInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *EstimateServicePlanCostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
