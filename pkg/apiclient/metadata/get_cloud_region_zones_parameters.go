// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCloudRegionZonesParams creates a new GetCloudRegionZonesParams object
// with the default values initialized.
func NewGetCloudRegionZonesParams() *GetCloudRegionZonesParams {
	var ()
	return &GetCloudRegionZonesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudRegionZonesParamsWithTimeout creates a new GetCloudRegionZonesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCloudRegionZonesParamsWithTimeout(timeout time.Duration) *GetCloudRegionZonesParams {
	var ()
	return &GetCloudRegionZonesParams{

		timeout: timeout,
	}
}

// NewGetCloudRegionZonesParamsWithContext creates a new GetCloudRegionZonesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCloudRegionZonesParamsWithContext(ctx context.Context) *GetCloudRegionZonesParams {
	var ()
	return &GetCloudRegionZonesParams{

		Context: ctx,
	}
}

// NewGetCloudRegionZonesParamsWithHTTPClient creates a new GetCloudRegionZonesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCloudRegionZonesParamsWithHTTPClient(client *http.Client) *GetCloudRegionZonesParams {
	var ()
	return &GetCloudRegionZonesParams{
		HTTPClient: client,
	}
}

/*GetCloudRegionZonesParams contains all the parameters to send to the API endpoint
for the get cloud region zones operation typically these are written to a http.Request
*/
type GetCloudRegionZonesParams struct {

	/*Cloud
	  The cloud provider to retrieve for

	*/
	Cloud string
	/*Region
	  The region to retrieve for

	*/
	Region string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cloud region zones params
func (o *GetCloudRegionZonesParams) WithTimeout(timeout time.Duration) *GetCloudRegionZonesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloud region zones params
func (o *GetCloudRegionZonesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloud region zones params
func (o *GetCloudRegionZonesParams) WithContext(ctx context.Context) *GetCloudRegionZonesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloud region zones params
func (o *GetCloudRegionZonesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloud region zones params
func (o *GetCloudRegionZonesParams) WithHTTPClient(client *http.Client) *GetCloudRegionZonesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloud region zones params
func (o *GetCloudRegionZonesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloud adds the cloud to the get cloud region zones params
func (o *GetCloudRegionZonesParams) WithCloud(cloud string) *GetCloudRegionZonesParams {
	o.SetCloud(cloud)
	return o
}

// SetCloud adds the cloud to the get cloud region zones params
func (o *GetCloudRegionZonesParams) SetCloud(cloud string) {
	o.Cloud = cloud
}

// WithRegion adds the region to the get cloud region zones params
func (o *GetCloudRegionZonesParams) WithRegion(region string) *GetCloudRegionZonesParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the get cloud region zones params
func (o *GetCloudRegionZonesParams) SetRegion(region string) {
	o.Region = region
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudRegionZonesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cloud
	if err := r.SetPathParam("cloud", o.Cloud); err != nil {
		return err
	}

	// path param region
	if err := r.SetPathParam("region", o.Region); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
