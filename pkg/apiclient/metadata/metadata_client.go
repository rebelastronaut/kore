// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new metadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetCloudNodeTypes(params *GetCloudNodeTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudNodeTypesOK, error)

	GetCloudRegionZones(params *GetCloudRegionZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudRegionZonesOK, error)

	GetCloudRegions(params *GetCloudRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudRegionsOK, error)

	GetKubernetesNodeTypes(params *GetKubernetesNodeTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesNodeTypesOK, error)

	GetKubernetesRegionZones(params *GetKubernetesRegionZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesRegionZonesOK, error)

	GetKubernetesRegions(params *GetKubernetesRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesRegionsOK, error)

	GetKubernetesVersions(params *GetKubernetesVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesVersionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCloudNodeTypes returns node types with prices for a given region of a given cloud provider
*/
func (a *Client) GetCloudNodeTypes(params *GetCloudNodeTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudNodeTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudNodeTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudNodeTypes",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/cloud/{cloud}/regions/{region}/nodetypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCloudNodeTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudNodeTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudNodeTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudRegionZones returns supported a zs for a given region of a given cloud provider
*/
func (a *Client) GetCloudRegionZones(params *GetCloudRegionZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudRegionZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudRegionZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudRegionZones",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/cloud/{cloud}/regions/{region}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCloudRegionZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudRegionZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudRegionZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudRegions returns regions for a cloud
*/
func (a *Client) GetCloudRegions(params *GetCloudRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudRegions",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/cloud/{cloud}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCloudRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCloudRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKubernetesNodeTypes returns node types with prices for a given region of a given kubernetes provider
*/
func (a *Client) GetKubernetesNodeTypes(params *GetKubernetesNodeTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesNodeTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesNodeTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKubernetesNodeTypes",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubernetesNodeTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesNodeTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesNodeTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKubernetesRegionZones returns supported a zs for a given region of a given kubernetes provider
*/
func (a *Client) GetKubernetesRegionZones(params *GetKubernetesRegionZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesRegionZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesRegionZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKubernetesRegionZones",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubernetesRegionZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesRegionZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesRegionZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKubernetesRegions returns regions for a kubernetes provider
*/
func (a *Client) GetKubernetesRegions(params *GetKubernetesRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKubernetesRegions",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/k8s/{provider}/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubernetesRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetKubernetesVersions returns supported kubernetes versions for a given region of a given kubernetes provider
*/
func (a *Client) GetKubernetesVersions(params *GetKubernetesVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetKubernetesVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKubernetesVersions",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/metadata/k8s/{provider}/regions/{region}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKubernetesVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubernetesVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKubernetesVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
