// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetKubernetesNodeTypesReader is a Reader for the GetKubernetesNodeTypes structure.
type GetKubernetesNodeTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKubernetesNodeTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKubernetesNodeTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetKubernetesNodeTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKubernetesNodeTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKubernetesNodeTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKubernetesNodeTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetKubernetesNodeTypesOK creates a GetKubernetesNodeTypesOK with default headers values
func NewGetKubernetesNodeTypesOK() *GetKubernetesNodeTypesOK {
	return &GetKubernetesNodeTypesOK{}
}

/*GetKubernetesNodeTypesOK handles this case with default header values.

A list of instance types with their pricing
*/
type GetKubernetesNodeTypesOK struct {
	Payload *models.V1beta1InstanceTypeList
}

func (o *GetKubernetesNodeTypesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances][%d] getKubernetesNodeTypesOK  %+v", 200, o.Payload)
}

func (o *GetKubernetesNodeTypesOK) GetPayload() *models.V1beta1InstanceTypeList {
	return o.Payload
}

func (o *GetKubernetesNodeTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1InstanceTypeList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKubernetesNodeTypesUnauthorized creates a GetKubernetesNodeTypesUnauthorized with default headers values
func NewGetKubernetesNodeTypesUnauthorized() *GetKubernetesNodeTypesUnauthorized {
	return &GetKubernetesNodeTypesUnauthorized{}
}

/*GetKubernetesNodeTypesUnauthorized handles this case with default header values.

If not authenticated
*/
type GetKubernetesNodeTypesUnauthorized struct {
}

func (o *GetKubernetesNodeTypesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances][%d] getKubernetesNodeTypesUnauthorized ", 401)
}

func (o *GetKubernetesNodeTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesNodeTypesForbidden creates a GetKubernetesNodeTypesForbidden with default headers values
func NewGetKubernetesNodeTypesForbidden() *GetKubernetesNodeTypesForbidden {
	return &GetKubernetesNodeTypesForbidden{}
}

/*GetKubernetesNodeTypesForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetKubernetesNodeTypesForbidden struct {
}

func (o *GetKubernetesNodeTypesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances][%d] getKubernetesNodeTypesForbidden ", 403)
}

func (o *GetKubernetesNodeTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesNodeTypesNotFound creates a GetKubernetesNodeTypesNotFound with default headers values
func NewGetKubernetesNodeTypesNotFound() *GetKubernetesNodeTypesNotFound {
	return &GetKubernetesNodeTypesNotFound{}
}

/*GetKubernetesNodeTypesNotFound handles this case with default header values.

provider or region doesn't exist
*/
type GetKubernetesNodeTypesNotFound struct {
}

func (o *GetKubernetesNodeTypesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances][%d] getKubernetesNodeTypesNotFound ", 404)
}

func (o *GetKubernetesNodeTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesNodeTypesInternalServerError creates a GetKubernetesNodeTypesInternalServerError with default headers values
func NewGetKubernetesNodeTypesInternalServerError() *GetKubernetesNodeTypesInternalServerError {
	return &GetKubernetesNodeTypesInternalServerError{}
}

/*GetKubernetesNodeTypesInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetKubernetesNodeTypesInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetKubernetesNodeTypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/instances][%d] getKubernetesNodeTypesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetKubernetesNodeTypesInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetKubernetesNodeTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
