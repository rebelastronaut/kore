// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetKubernetesRegionZonesReader is a Reader for the GetKubernetesRegionZones structure.
type GetKubernetesRegionZonesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKubernetesRegionZonesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKubernetesRegionZonesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetKubernetesRegionZonesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKubernetesRegionZonesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKubernetesRegionZonesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKubernetesRegionZonesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetKubernetesRegionZonesOK creates a GetKubernetesRegionZonesOK with default headers values
func NewGetKubernetesRegionZonesOK() *GetKubernetesRegionZonesOK {
	return &GetKubernetesRegionZonesOK{}
}

/*GetKubernetesRegionZonesOK handles this case with default header values.

A list of supported availability zones
*/
type GetKubernetesRegionZonesOK struct {
	Payload []string
}

func (o *GetKubernetesRegionZonesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones][%d] getKubernetesRegionZonesOK  %+v", 200, o.Payload)
}

func (o *GetKubernetesRegionZonesOK) GetPayload() []string {
	return o.Payload
}

func (o *GetKubernetesRegionZonesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKubernetesRegionZonesUnauthorized creates a GetKubernetesRegionZonesUnauthorized with default headers values
func NewGetKubernetesRegionZonesUnauthorized() *GetKubernetesRegionZonesUnauthorized {
	return &GetKubernetesRegionZonesUnauthorized{}
}

/*GetKubernetesRegionZonesUnauthorized handles this case with default header values.

If not authenticated
*/
type GetKubernetesRegionZonesUnauthorized struct {
}

func (o *GetKubernetesRegionZonesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones][%d] getKubernetesRegionZonesUnauthorized ", 401)
}

func (o *GetKubernetesRegionZonesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesRegionZonesForbidden creates a GetKubernetesRegionZonesForbidden with default headers values
func NewGetKubernetesRegionZonesForbidden() *GetKubernetesRegionZonesForbidden {
	return &GetKubernetesRegionZonesForbidden{}
}

/*GetKubernetesRegionZonesForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetKubernetesRegionZonesForbidden struct {
}

func (o *GetKubernetesRegionZonesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones][%d] getKubernetesRegionZonesForbidden ", 403)
}

func (o *GetKubernetesRegionZonesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesRegionZonesNotFound creates a GetKubernetesRegionZonesNotFound with default headers values
func NewGetKubernetesRegionZonesNotFound() *GetKubernetesRegionZonesNotFound {
	return &GetKubernetesRegionZonesNotFound{}
}

/*GetKubernetesRegionZonesNotFound handles this case with default header values.

provider or region doesn't exist
*/
type GetKubernetesRegionZonesNotFound struct {
}

func (o *GetKubernetesRegionZonesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones][%d] getKubernetesRegionZonesNotFound ", 404)
}

func (o *GetKubernetesRegionZonesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetKubernetesRegionZonesInternalServerError creates a GetKubernetesRegionZonesInternalServerError with default headers values
func NewGetKubernetesRegionZonesInternalServerError() *GetKubernetesRegionZonesInternalServerError {
	return &GetKubernetesRegionZonesInternalServerError{}
}

/*GetKubernetesRegionZonesInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetKubernetesRegionZonesInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetKubernetesRegionZonesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/metadata/k8s/{provider}/regions/{region}/zones][%d] getKubernetesRegionZonesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetKubernetesRegionZonesInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetKubernetesRegionZonesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
