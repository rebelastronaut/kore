// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1AgentPoolProfile v1alpha1 agent pool profile
//
// swagger:model v1alpha1.AgentPoolProfile
type V1alpha1AgentPoolProfile struct {

	// count
	// Required: true
	Count *int64 `json:"count"`

	// enable auto scaling
	EnableAutoScaling bool `json:"enableAutoScaling,omitempty"`

	// max count
	// Required: true
	MaxCount *int64 `json:"maxCount"`

	// max pods
	MaxPods int64 `json:"maxPods,omitempty"`

	// min count
	// Required: true
	MinCount *int64 `json:"minCount"`

	// mode
	// Required: true
	Mode *string `json:"mode"`

	// name
	// Required: true
	Name *string `json:"name"`

	// node image version
	NodeImageVersion string `json:"nodeImageVersion,omitempty"`

	// node labels
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// node taints
	NodeTaints []*V1alpha1NodeTaint `json:"nodeTaints"`

	// os disk size g b
	// Required: true
	OsDiskSizeGB *int64 `json:"osDiskSizeGB"`

	// os type
	// Required: true
	OsType *string `json:"osType"`

	// vm size
	// Required: true
	VMSize *string `json:"vmSize"`
}

// Validate validates this v1alpha1 agent pool profile
func (m *V1alpha1AgentPoolProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsDiskSizeGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1AgentPoolProfile) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateMaxCount(formats strfmt.Registry) error {

	if err := validate.Required("maxCount", "body", m.MaxCount); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateMinCount(formats strfmt.Registry) error {

	if err := validate.Required("minCount", "body", m.MinCount); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateNodeTaints(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeTaints) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTaints); i++ {
		if swag.IsZero(m.NodeTaints[i]) { // not required
			continue
		}

		if m.NodeTaints[i] != nil {
			if err := m.NodeTaints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTaints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateOsDiskSizeGB(formats strfmt.Registry) error {

	if err := validate.Required("osDiskSizeGB", "body", m.OsDiskSizeGB); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateOsType(formats strfmt.Registry) error {

	if err := validate.Required("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1AgentPoolProfile) validateVMSize(formats strfmt.Registry) error {

	if err := validate.Required("vmSize", "body", m.VMSize); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1AgentPoolProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1AgentPoolProfile) UnmarshalBinary(b []byte) error {
	var res V1alpha1AgentPoolProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
