// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1GKENodePool v1alpha1 g k e node pool
//
// swagger:model v1alpha1.GKENodePool
type V1alpha1GKENodePool struct {

	// disk size
	// Required: true
	DiskSize *int64 `json:"diskSize"`

	// enable autorepair
	// Required: true
	EnableAutorepair *bool `json:"enableAutorepair"`

	// enable autoscaler
	// Required: true
	EnableAutoscaler *bool `json:"enableAutoscaler"`

	// enable autoupgrade
	// Required: true
	EnableAutoupgrade *bool `json:"enableAutoupgrade"`

	// image type
	// Required: true
	ImageType *string `json:"imageType"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// max pods per node
	// Required: true
	MaxPodsPerNode *int64 `json:"maxPodsPerNode"`

	// max size
	// Required: true
	MaxSize *int64 `json:"maxSize"`

	// min size
	// Required: true
	MinSize *int64 `json:"minSize"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pre emptible
	// Required: true
	PreEmptible *bool `json:"preEmptible"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this v1alpha1 g k e node pool
func (m *V1alpha1GKENodePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutorepair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoupgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPodsPerNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreEmptible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1GKENodePool) validateDiskSize(formats strfmt.Registry) error {

	if err := validate.Required("diskSize", "body", m.DiskSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateEnableAutorepair(formats strfmt.Registry) error {

	if err := validate.Required("enableAutorepair", "body", m.EnableAutorepair); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateEnableAutoscaler(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoscaler", "body", m.EnableAutoscaler); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateEnableAutoupgrade(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoupgrade", "body", m.EnableAutoupgrade); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateImageType(formats strfmt.Registry) error {

	if err := validate.Required("imageType", "body", m.ImageType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateMaxPodsPerNode(formats strfmt.Registry) error {

	if err := validate.Required("maxPodsPerNode", "body", m.MaxPodsPerNode); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("maxSize", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateMinSize(formats strfmt.Registry) error {

	if err := validate.Required("minSize", "body", m.MinSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validatePreEmptible(formats strfmt.Registry) error {

	if err := validate.Required("preEmptible", "body", m.PreEmptible); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKENodePool) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1GKENodePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1GKENodePool) UnmarshalBinary(b []byte) error {
	var res V1alpha1GKENodePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
