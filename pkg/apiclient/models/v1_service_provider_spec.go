// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ServiceProviderSpec v1 service provider spec
//
// swagger:model v1.ServiceProviderSpec
type V1ServiceProviderSpec struct {

	// configuration
	Configuration interface{} `json:"configuration,omitempty"`

	// configuration from
	ConfigurationFrom []*V1ConfigurationFromSource `json:"configurationFrom"`

	// description
	Description string `json:"description,omitempty"`

	// summary
	// Required: true
	Summary *string `json:"summary"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v1 service provider spec
func (m *V1ServiceProviderSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServiceProviderSpec) validateConfigurationFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationFrom) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigurationFrom); i++ {
		if swag.IsZero(m.ConfigurationFrom[i]) { // not required
			continue
		}

		if m.ConfigurationFrom[i] != nil {
			if err := m.ConfigurationFrom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurationFrom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1ServiceProviderSpec) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

func (m *V1ServiceProviderSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ServiceProviderSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ServiceProviderSpec) UnmarshalBinary(b []byte) error {
	var res V1ServiceProviderSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
