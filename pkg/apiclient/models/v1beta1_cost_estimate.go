// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1beta1CostEstimate v1beta1 cost estimate
//
// swagger:model v1beta1.CostEstimate
type V1beta1CostEstimate struct {

	// cost elements
	CostElements []*V1beta1CostEstimateElement `json:"costElements"`

	// max cost
	MaxCost int64 `json:"maxCost,omitempty"`

	// min cost
	MinCost int64 `json:"minCost,omitempty"`

	// prepared at
	PreparedAt string `json:"preparedAt,omitempty"`

	// typical cost
	TypicalCost int64 `json:"typicalCost,omitempty"`
}

// Validate validates this v1beta1 cost estimate
func (m *V1beta1CostEstimate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostElements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1CostEstimate) validateCostElements(formats strfmt.Registry) error {

	if swag.IsZero(m.CostElements) { // not required
		return nil
	}

	for i := 0; i < len(m.CostElements); i++ {
		if swag.IsZero(m.CostElements[i]) { // not required
			continue
		}

		if m.CostElements[i] != nil {
			if err := m.CostElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1CostEstimate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1CostEstimate) UnmarshalBinary(b []byte) error {
	var res V1beta1CostEstimate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
