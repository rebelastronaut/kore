// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1GKESpec v1alpha1 g k e spec
//
// swagger:model v1alpha1.GKESpec
type V1alpha1GKESpec struct {

	// authorized master networks
	// Required: true
	AuthorizedMasterNetworks []*V1alpha1AuthorizedNetwork `json:"authorizedMasterNetworks"`

	// cluster
	Cluster *V1Ownership `json:"cluster,omitempty"`

	// cluster IP v4 cidr
	// Required: true
	ClusterIPV4Cidr *string `json:"clusterIPV4Cidr"`

	// credentials
	// Required: true
	Credentials *V1Ownership `json:"credentials"`

	// description
	// Required: true
	Description *string `json:"description"`

	// disk size
	// Required: true
	DiskSize *int64 `json:"diskSize"`

	// enable autorepair
	// Required: true
	EnableAutorepair *bool `json:"enableAutorepair"`

	// enable autoscaler
	// Required: true
	EnableAutoscaler *bool `json:"enableAutoscaler"`

	// enable autoupgrade
	// Required: true
	EnableAutoupgrade *bool `json:"enableAutoupgrade"`

	// enable HTTP load balancer
	// Required: true
	EnableHTTPLoadBalancer *bool `json:"enableHTTPLoadBalancer"`

	// enable horizontal pod autoscaler
	// Required: true
	EnableHorizontalPodAutoscaler *bool `json:"enableHorizontalPodAutoscaler"`

	// enable istio
	// Required: true
	EnableIstio *bool `json:"enableIstio"`

	// enable private endpoint
	// Required: true
	EnablePrivateEndpoint *bool `json:"enablePrivateEndpoint"`

	// enable private network
	// Required: true
	EnablePrivateNetwork *bool `json:"enablePrivateNetwork"`

	// enable shielded nodes
	// Required: true
	EnableShieldedNodes *bool `json:"enableShieldedNodes"`

	// enable stack driver logging
	// Required: true
	EnableStackDriverLogging *bool `json:"enableStackDriverLogging"`

	// enable stack driver metrics
	// Required: true
	EnableStackDriverMetrics *bool `json:"enableStackDriverMetrics"`

	// image type
	// Required: true
	ImageType *string `json:"imageType"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// maintenance window
	// Required: true
	MaintenanceWindow *string `json:"maintenanceWindow"`

	// master IP v4 cidr
	// Required: true
	MasterIPV4Cidr *string `json:"masterIPV4Cidr"`

	// max size
	// Required: true
	MaxSize *int64 `json:"maxSize"`

	// network
	// Required: true
	Network *string `json:"network"`

	// node pools
	// Required: true
	NodePools []*V1alpha1GKENodePool `json:"nodePools"`

	// region
	Region string `json:"region,omitempty"`

	// release channel
	// Required: true
	ReleaseChannel *string `json:"releaseChannel"`

	// services IP v4 cidr
	// Required: true
	ServicesIPV4Cidr *string `json:"servicesIPV4Cidr"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// subnetwork
	// Required: true
	Subnetwork *string `json:"subnetwork"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this v1alpha1 g k e spec
func (m *V1alpha1GKESpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizedMasterNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterIPV4Cidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutorepair(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoupgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableHTTPLoadBalancer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableHorizontalPodAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableIstio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnablePrivateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnablePrivateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableShieldedNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableStackDriverLogging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableStackDriverMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterIPV4Cidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicesIPV4Cidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1GKESpec) validateAuthorizedMasterNetworks(formats strfmt.Registry) error {

	if err := validate.Required("authorizedMasterNetworks", "body", m.AuthorizedMasterNetworks); err != nil {
		return err
	}

	for i := 0; i < len(m.AuthorizedMasterNetworks); i++ {
		if swag.IsZero(m.AuthorizedMasterNetworks[i]) { // not required
			continue
		}

		if m.AuthorizedMasterNetworks[i] != nil {
			if err := m.AuthorizedMasterNetworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorizedMasterNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1GKESpec) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1GKESpec) validateClusterIPV4Cidr(formats strfmt.Registry) error {

	if err := validate.Required("clusterIPV4Cidr", "body", m.ClusterIPV4Cidr); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1GKESpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateDiskSize(formats strfmt.Registry) error {

	if err := validate.Required("diskSize", "body", m.DiskSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableAutorepair(formats strfmt.Registry) error {

	if err := validate.Required("enableAutorepair", "body", m.EnableAutorepair); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableAutoscaler(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoscaler", "body", m.EnableAutoscaler); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableAutoupgrade(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoupgrade", "body", m.EnableAutoupgrade); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableHTTPLoadBalancer(formats strfmt.Registry) error {

	if err := validate.Required("enableHTTPLoadBalancer", "body", m.EnableHTTPLoadBalancer); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableHorizontalPodAutoscaler(formats strfmt.Registry) error {

	if err := validate.Required("enableHorizontalPodAutoscaler", "body", m.EnableHorizontalPodAutoscaler); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableIstio(formats strfmt.Registry) error {

	if err := validate.Required("enableIstio", "body", m.EnableIstio); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnablePrivateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("enablePrivateEndpoint", "body", m.EnablePrivateEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnablePrivateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("enablePrivateNetwork", "body", m.EnablePrivateNetwork); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableShieldedNodes(formats strfmt.Registry) error {

	if err := validate.Required("enableShieldedNodes", "body", m.EnableShieldedNodes); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableStackDriverLogging(formats strfmt.Registry) error {

	if err := validate.Required("enableStackDriverLogging", "body", m.EnableStackDriverLogging); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateEnableStackDriverMetrics(formats strfmt.Registry) error {

	if err := validate.Required("enableStackDriverMetrics", "body", m.EnableStackDriverMetrics); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateImageType(formats strfmt.Registry) error {

	if err := validate.Required("imageType", "body", m.ImageType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateMaintenanceWindow(formats strfmt.Registry) error {

	if err := validate.Required("maintenanceWindow", "body", m.MaintenanceWindow); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateMasterIPV4Cidr(formats strfmt.Registry) error {

	if err := validate.Required("masterIPV4Cidr", "body", m.MasterIPV4Cidr); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("maxSize", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("network", "body", m.Network); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateNodePools(formats strfmt.Registry) error {

	if err := validate.Required("nodePools", "body", m.NodePools); err != nil {
		return err
	}

	for i := 0; i < len(m.NodePools); i++ {
		if swag.IsZero(m.NodePools[i]) { // not required
			continue
		}

		if m.NodePools[i] != nil {
			if err := m.NodePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodePools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1GKESpec) validateReleaseChannel(formats strfmt.Registry) error {

	if err := validate.Required("releaseChannel", "body", m.ReleaseChannel); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateServicesIPV4Cidr(formats strfmt.Registry) error {

	if err := validate.Required("servicesIPV4Cidr", "body", m.ServicesIPV4Cidr); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateSubnetwork(formats strfmt.Registry) error {

	if err := validate.Required("subnetwork", "body", m.Subnetwork); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1GKESpec) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1GKESpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1GKESpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1GKESpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
