// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ServiceKindSpec v1 service kind spec
//
// swagger:model v1.ServiceKindSpec
type V1ServiceKindSpec struct {

	// credential schema
	CredentialSchema string `json:"credentialSchema,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// documentation URL
	DocumentationURL string `json:"documentationURL,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// image URL
	ImageURL string `json:"imageURL,omitempty"`

	// provider data
	ProviderData string `json:"providerData,omitempty"`

	// schema
	Schema string `json:"schema,omitempty"`

	// service access enabled
	// Required: true
	ServiceAccessEnabled *bool `json:"serviceAccessEnabled"`

	// summary
	// Required: true
	Summary *string `json:"summary"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this v1 service kind spec
func (m *V1ServiceKindSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccessEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServiceKindSpec) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *V1ServiceKindSpec) validateServiceAccessEnabled(formats strfmt.Registry) error {

	if err := validate.Required("serviceAccessEnabled", "body", m.ServiceAccessEnabled); err != nil {
		return err
	}

	return nil
}

func (m *V1ServiceKindSpec) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

func (m *V1ServiceKindSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ServiceKindSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ServiceKindSpec) UnmarshalBinary(b []byte) error {
	var res V1ServiceKindSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
