// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApiserverTeamPlan apiserver team plan
//
// swagger:model apiserver.TeamPlan
type ApiserverTeamPlan struct {

	// editable params
	// Required: true
	EditableParams []string `json:"editableParams"`

	// plan
	Plan *V1PlanSpec `json:"plan,omitempty"`

	// schema
	// Required: true
	Schema *string `json:"schema"`
}

// Validate validates this apiserver team plan
func (m *ApiserverTeamPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEditableParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApiserverTeamPlan) validateEditableParams(formats strfmt.Registry) error {

	if err := validate.Required("editableParams", "body", m.EditableParams); err != nil {
		return err
	}

	return nil
}

func (m *ApiserverTeamPlan) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *ApiserverTeamPlan) validateSchema(formats strfmt.Registry) error {

	if err := validate.Required("schema", "body", m.Schema); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApiserverTeamPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApiserverTeamPlan) UnmarshalBinary(b []byte) error {
	var res ApiserverTeamPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
