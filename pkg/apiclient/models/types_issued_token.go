// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesIssuedToken types issued token
//
// swagger:model types.IssuedToken
type TypesIssuedToken struct {

	// expires
	// Required: true
	Expires *int64 `json:"Expires"`

	// refresh token
	// Required: true
	RefreshToken *string `json:"RefreshToken"`

	// token
	// Required: true
	Token *string `json:"Token"`
}

// Validate validates this types issued token
func (m *TypesIssuedToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesIssuedToken) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("Expires", "body", m.Expires); err != nil {
		return err
	}

	return nil
}

func (m *TypesIssuedToken) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("RefreshToken", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (m *TypesIssuedToken) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("Token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesIssuedToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesIssuedToken) UnmarshalBinary(b []byte) error {
	var res TypesIssuedToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
