// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1CostEstimateElement v1beta1 cost estimate element
//
// swagger:model v1beta1.CostEstimateElement
type V1beta1CostEstimateElement struct {

	// max cost
	// Required: true
	MaxCost *int64 `json:"maxCost"`

	// min cost
	// Required: true
	MinCost *int64 `json:"minCost"`

	// name
	Name string `json:"name,omitempty"`

	// typical cost
	// Required: true
	TypicalCost *int64 `json:"typicalCost"`
}

// Validate validates this v1beta1 cost estimate element
func (m *V1beta1CostEstimateElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypicalCost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1CostEstimateElement) validateMaxCost(formats strfmt.Registry) error {

	if err := validate.Required("maxCost", "body", m.MaxCost); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1CostEstimateElement) validateMinCost(formats strfmt.Registry) error {

	if err := validate.Required("minCost", "body", m.MinCost); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1CostEstimateElement) validateTypicalCost(formats strfmt.Registry) error {

	if err := validate.Required("typicalCost", "body", m.TypicalCost); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1CostEstimateElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1CostEstimateElement) UnmarshalBinary(b []byte) error {
	var res V1beta1CostEstimateElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
