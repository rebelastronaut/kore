// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1EKSNodeGroupSpec v1alpha1 e k s node group spec
//
// swagger:model v1alpha1.EKSNodeGroupSpec
type V1alpha1EKSNodeGroupSpec struct {

	// ami type
	// Required: true
	AmiType *string `json:"amiType"`

	// cluster
	Cluster *V1Ownership `json:"cluster,omitempty"`

	// credentials
	// Required: true
	Credentials *V1Ownership `json:"credentials"`

	// desired size
	// Required: true
	DesiredSize *int64 `json:"desiredSize"`

	// disk size
	// Required: true
	DiskSize *int64 `json:"diskSize"`

	// e c2 SSH key
	// Required: true
	EC2SSHKey *string `json:"eC2SSHKey"`

	// enable autoscaler
	// Required: true
	EnableAutoscaler *bool `json:"enableAutoscaler"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// max size
	// Required: true
	MaxSize *int64 `json:"maxSize"`

	// min size
	// Required: true
	MinSize *int64 `json:"minSize"`

	// region
	// Required: true
	Region *string `json:"region"`

	// release version
	ReleaseVersion string `json:"releaseVersion,omitempty"`

	// ssh source security groups
	SSHSourceSecurityGroups []string `json:"sshSourceSecurityGroups"`

	// subnets
	// Required: true
	Subnets []string `json:"subnets"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1alpha1 e k s node group spec
func (m *V1alpha1EKSNodeGroupSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmiType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEC2SSHKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableAutoscaler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateAmiType(formats strfmt.Registry) error {

	if err := validate.Required("amiType", "body", m.AmiType); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateDesiredSize(formats strfmt.Registry) error {

	if err := validate.Required("desiredSize", "body", m.DesiredSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateDiskSize(formats strfmt.Registry) error {

	if err := validate.Required("diskSize", "body", m.DiskSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateEC2SSHKey(formats strfmt.Registry) error {

	if err := validate.Required("eC2SSHKey", "body", m.EC2SSHKey); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateEnableAutoscaler(formats strfmt.Registry) error {

	if err := validate.Required("enableAutoscaler", "body", m.EnableAutoscaler); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("maxSize", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateMinSize(formats strfmt.Registry) error {

	if err := validate.Required("minSize", "body", m.MinSize); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSNodeGroupSpec) validateSubnets(formats strfmt.Registry) error {

	if err := validate.Required("subnets", "body", m.Subnets); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1EKSNodeGroupSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1EKSNodeGroupSpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1EKSNodeGroupSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
