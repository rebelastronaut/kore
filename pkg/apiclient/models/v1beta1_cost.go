// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1beta1Cost v1beta1 cost
//
// swagger:model v1beta1.Cost
type V1beta1Cost struct {

	// cost
	Cost int64 `json:"cost,omitempty"`

	// cost elements
	CostElements []*V1beta1CostElement `json:"costElements"`

	// from
	From string `json:"from,omitempty"`

	// prepared at
	PreparedAt string `json:"preparedAt,omitempty"`

	// resource
	Resource *V1Ownership `json:"resource,omitempty"`

	// team
	Team string `json:"team,omitempty"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this v1beta1 cost
func (m *V1beta1Cost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1Cost) validateCostElements(formats strfmt.Registry) error {

	if swag.IsZero(m.CostElements) { // not required
		return nil
	}

	for i := 0; i < len(m.CostElements); i++ {
		if swag.IsZero(m.CostElements[i]) { // not required
			continue
		}

		if m.CostElements[i] != nil {
			if err := m.CostElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1beta1Cost) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1Cost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1Cost) UnmarshalBinary(b []byte) error {
	var res V1beta1Cost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
