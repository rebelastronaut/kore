// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha1EKSSpec v1alpha1 e k s spec
//
// swagger:model v1alpha1.EKSSpec
type V1alpha1EKSSpec struct {

	// authorized master networks
	AuthorizedMasterNetworks []string `json:"authorizedMasterNetworks"`

	// cluster
	Cluster *V1Ownership `json:"cluster,omitempty"`

	// credentials
	// Required: true
	Credentials *V1Ownership `json:"credentials"`

	// enable private network
	EnablePrivateNetwork bool `json:"enablePrivateNetwork,omitempty"`

	// region
	// Required: true
	Region *string `json:"region"`

	// security group i ds
	SecurityGroupIDs []string `json:"securityGroupIDs"`

	// subnet i ds
	// Required: true
	SubnetIDs []string `json:"subnetIDs"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this v1alpha1 e k s spec
func (m *V1alpha1EKSSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1EKSSpec) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1EKSSpec) validateCredentials(formats strfmt.Registry) error {

	if err := validate.Required("credentials", "body", m.Credentials); err != nil {
		return err
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1EKSSpec) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha1EKSSpec) validateSubnetIDs(formats strfmt.Registry) error {

	if err := validate.Required("subnetIDs", "body", m.SubnetIDs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1EKSSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1EKSSpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1EKSSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
