// Code generated by go-swagger; DO NOT EDIT.

package korefeatures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new korefeatures API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for korefeatures API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetFeature(params *GetFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureOK, error)

	ListFeatures(params *ListFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*ListFeaturesOK, error)

	RemoveFeature(params *RemoveFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveFeatureOK, error)

	UpdateFeature(params *UpdateFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeatureOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetFeature returns a specific feature
*/
func (a *Client) GetFeature(params *GetFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFeature",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/korefeatures/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFeatures returns a list of features
*/
func (a *Client) ListFeatures(params *ListFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*ListFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListFeatures",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/korefeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveFeature useds to delete a feature
*/
func (a *Client) RemoveFeature(params *RemoveFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveFeature",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/korefeatures/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFeature useds to create or update a feature
*/
func (a *Client) UpdateFeature(params *UpdateFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateFeature",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/korefeatures/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
