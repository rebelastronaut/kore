// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteResourceRulesParams creates a new DeleteResourceRulesParams object
// with the default values initialized.
func NewDeleteResourceRulesParams() *DeleteResourceRulesParams {
	var ()
	return &DeleteResourceRulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteResourceRulesParamsWithTimeout creates a new DeleteResourceRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteResourceRulesParamsWithTimeout(timeout time.Duration) *DeleteResourceRulesParams {
	var ()
	return &DeleteResourceRulesParams{

		timeout: timeout,
	}
}

// NewDeleteResourceRulesParamsWithContext creates a new DeleteResourceRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteResourceRulesParamsWithContext(ctx context.Context) *DeleteResourceRulesParams {
	var ()
	return &DeleteResourceRulesParams{

		Context: ctx,
	}
}

// NewDeleteResourceRulesParamsWithHTTPClient creates a new DeleteResourceRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteResourceRulesParamsWithHTTPClient(client *http.Client) *DeleteResourceRulesParams {
	var ()
	return &DeleteResourceRulesParams{
		HTTPClient: client,
	}
}

/*DeleteResourceRulesParams contains all the parameters to send to the API endpoint
for the delete resource rules operation typically these are written to a http.Request
*/
type DeleteResourceRulesParams struct {

	/*Group
	  Is the group of the kind

	*/
	Group string
	/*Kind
	  Is the kind of the resource

	*/
	Kind string
	/*Namespace
	  Is the namespace of the resource

	*/
	Namespace string
	/*Resource
	  Is the name of the resource

	*/
	Resource string
	/*Source
	  The producer of the alerting rule

	*/
	Source *string
	/*Version
	  Is the version of the kind

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete resource rules params
func (o *DeleteResourceRulesParams) WithTimeout(timeout time.Duration) *DeleteResourceRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete resource rules params
func (o *DeleteResourceRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete resource rules params
func (o *DeleteResourceRulesParams) WithContext(ctx context.Context) *DeleteResourceRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete resource rules params
func (o *DeleteResourceRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete resource rules params
func (o *DeleteResourceRulesParams) WithHTTPClient(client *http.Client) *DeleteResourceRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete resource rules params
func (o *DeleteResourceRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the delete resource rules params
func (o *DeleteResourceRulesParams) WithGroup(group string) *DeleteResourceRulesParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the delete resource rules params
func (o *DeleteResourceRulesParams) SetGroup(group string) {
	o.Group = group
}

// WithKind adds the kind to the delete resource rules params
func (o *DeleteResourceRulesParams) WithKind(kind string) *DeleteResourceRulesParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the delete resource rules params
func (o *DeleteResourceRulesParams) SetKind(kind string) {
	o.Kind = kind
}

// WithNamespace adds the namespace to the delete resource rules params
func (o *DeleteResourceRulesParams) WithNamespace(namespace string) *DeleteResourceRulesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the delete resource rules params
func (o *DeleteResourceRulesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithResource adds the resource to the delete resource rules params
func (o *DeleteResourceRulesParams) WithResource(resource string) *DeleteResourceRulesParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the delete resource rules params
func (o *DeleteResourceRulesParams) SetResource(resource string) {
	o.Resource = resource
}

// WithSource adds the source to the delete resource rules params
func (o *DeleteResourceRulesParams) WithSource(source *string) *DeleteResourceRulesParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the delete resource rules params
func (o *DeleteResourceRulesParams) SetSource(source *string) {
	o.Source = source
}

// WithVersion adds the version to the delete resource rules params
func (o *DeleteResourceRulesParams) WithVersion(version string) *DeleteResourceRulesParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete resource rules params
func (o *DeleteResourceRulesParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteResourceRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param group
	if err := r.SetPathParam("group", o.Group); err != nil {
		return err
	}

	// path param kind
	if err := r.SetPathParam("kind", o.Kind); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param resource
	if err := r.SetPathParam("resource", o.Resource); err != nil {
		return err
	}

	if o.Source != nil {

		// query param source
		var qrSource string
		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {
			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}

	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
