// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPurgeRuleAlertsParams creates a new PurgeRuleAlertsParams object
// with the default values initialized.
func NewPurgeRuleAlertsParams() *PurgeRuleAlertsParams {
	var ()
	return &PurgeRuleAlertsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPurgeRuleAlertsParamsWithTimeout creates a new PurgeRuleAlertsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPurgeRuleAlertsParamsWithTimeout(timeout time.Duration) *PurgeRuleAlertsParams {
	var ()
	return &PurgeRuleAlertsParams{

		timeout: timeout,
	}
}

// NewPurgeRuleAlertsParamsWithContext creates a new PurgeRuleAlertsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPurgeRuleAlertsParamsWithContext(ctx context.Context) *PurgeRuleAlertsParams {
	var ()
	return &PurgeRuleAlertsParams{

		Context: ctx,
	}
}

// NewPurgeRuleAlertsParamsWithHTTPClient creates a new PurgeRuleAlertsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPurgeRuleAlertsParamsWithHTTPClient(client *http.Client) *PurgeRuleAlertsParams {
	var ()
	return &PurgeRuleAlertsParams{
		HTTPClient: client,
	}
}

/*PurgeRuleAlertsParams contains all the parameters to send to the API endpoint
for the purge rule alerts operation typically these are written to a http.Request
*/
type PurgeRuleAlertsParams struct {

	/*Duration
	  The duration to keep i.e. 1h 24d

	*/
	Duration *string
	/*Group
	  Is the group of the kind

	*/
	Group string
	/*Kind
	  Is the kind of the resource

	*/
	Kind string
	/*Name
	  Is the name of the alerting rule

	*/
	Name string
	/*Namespace
	  Is the namespace of the resource

	*/
	Namespace string
	/*Resource
	  Is the name of the resource

	*/
	Resource string
	/*Version
	  Is the version of the kind

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithTimeout(timeout time.Duration) *PurgeRuleAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithContext(ctx context.Context) *PurgeRuleAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithHTTPClient(client *http.Client) *PurgeRuleAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDuration adds the duration to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithDuration(duration *string) *PurgeRuleAlertsParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetDuration(duration *string) {
	o.Duration = duration
}

// WithGroup adds the group to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithGroup(group string) *PurgeRuleAlertsParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetGroup(group string) {
	o.Group = group
}

// WithKind adds the kind to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithKind(kind string) *PurgeRuleAlertsParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetKind(kind string) {
	o.Kind = kind
}

// WithName adds the name to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithName(name string) *PurgeRuleAlertsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithNamespace(namespace string) *PurgeRuleAlertsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithResource adds the resource to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithResource(resource string) *PurgeRuleAlertsParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetResource(resource string) {
	o.Resource = resource
}

// WithVersion adds the version to the purge rule alerts params
func (o *PurgeRuleAlertsParams) WithVersion(version string) *PurgeRuleAlertsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the purge rule alerts params
func (o *PurgeRuleAlertsParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *PurgeRuleAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Duration != nil {

		// query param duration
		var qrDuration string
		if o.Duration != nil {
			qrDuration = *o.Duration
		}
		qDuration := qrDuration
		if qDuration != "" {
			if err := r.SetQueryParam("duration", qDuration); err != nil {
				return err
			}
		}

	}

	// path param group
	if err := r.SetPathParam("group", o.Group); err != nil {
		return err
	}

	// path param kind
	if err := r.SetPathParam("kind", o.Kind); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param resource
	if err := r.SetPathParam("resource", o.Resource); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
