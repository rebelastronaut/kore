// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSilenceAlertParams creates a new SilenceAlertParams object
// with the default values initialized.
func NewSilenceAlertParams() *SilenceAlertParams {
	var ()
	return &SilenceAlertParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSilenceAlertParamsWithTimeout creates a new SilenceAlertParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSilenceAlertParamsWithTimeout(timeout time.Duration) *SilenceAlertParams {
	var ()
	return &SilenceAlertParams{

		timeout: timeout,
	}
}

// NewSilenceAlertParamsWithContext creates a new SilenceAlertParams object
// with the default values initialized, and the ability to set a context for a request
func NewSilenceAlertParamsWithContext(ctx context.Context) *SilenceAlertParams {
	var ()
	return &SilenceAlertParams{

		Context: ctx,
	}
}

// NewSilenceAlertParamsWithHTTPClient creates a new SilenceAlertParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSilenceAlertParamsWithHTTPClient(client *http.Client) *SilenceAlertParams {
	var ()
	return &SilenceAlertParams{
		HTTPClient: client,
	}
}

/*SilenceAlertParams contains all the parameters to send to the API endpoint
for the silence alert operation typically these are written to a http.Request
*/
type SilenceAlertParams struct {

	/*Comment
	  The message added to the alert when silencing it

	*/
	Comment *string
	/*Expire
	  The duration the alert will be silenced

	*/
	Expire *string
	/*UID
	  The unique identifer for the alert

	*/
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the silence alert params
func (o *SilenceAlertParams) WithTimeout(timeout time.Duration) *SilenceAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the silence alert params
func (o *SilenceAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the silence alert params
func (o *SilenceAlertParams) WithContext(ctx context.Context) *SilenceAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the silence alert params
func (o *SilenceAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the silence alert params
func (o *SilenceAlertParams) WithHTTPClient(client *http.Client) *SilenceAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the silence alert params
func (o *SilenceAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the silence alert params
func (o *SilenceAlertParams) WithComment(comment *string) *SilenceAlertParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the silence alert params
func (o *SilenceAlertParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithExpire adds the expire to the silence alert params
func (o *SilenceAlertParams) WithExpire(expire *string) *SilenceAlertParams {
	o.SetExpire(expire)
	return o
}

// SetExpire adds the expire to the silence alert params
func (o *SilenceAlertParams) SetExpire(expire *string) {
	o.Expire = expire
}

// WithUID adds the uid to the silence alert params
func (o *SilenceAlertParams) WithUID(uid string) *SilenceAlertParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the silence alert params
func (o *SilenceAlertParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *SilenceAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	if o.Expire != nil {

		// query param expire
		var qrExpire string
		if o.Expire != nil {
			qrExpire = *o.Expire
		}
		qExpire := qrExpire
		if qExpire != "" {
			if err := r.SetQueryParam("expire", qExpire); err != nil {
				return err
			}
		}

	}

	// path param uid
	if err := r.SetPathParam("uid", o.UID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
