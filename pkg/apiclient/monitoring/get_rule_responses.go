// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// GetRuleReader is a Reader for the GetRule structure.
type GetRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRuleOK creates a GetRuleOK with default headers values
func NewGetRuleOK() *GetRuleOK {
	return &GetRuleOK{}
}

/*GetRuleOK handles this case with default header values.

The definition of the monitoring rule
*/
type GetRuleOK struct {
	Payload *models.V1beta1AlertRule
}

func (o *GetRuleOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}][%d] getRuleOK  %+v", 200, o.Payload)
}

func (o *GetRuleOK) GetPayload() *models.V1beta1AlertRule {
	return o.Payload
}

func (o *GetRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1AlertRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleBadRequest creates a GetRuleBadRequest with default headers values
func NewGetRuleBadRequest() *GetRuleBadRequest {
	return &GetRuleBadRequest{}
}

/*GetRuleBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type GetRuleBadRequest struct {
	Payload *models.ValidationError
}

func (o *GetRuleBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}][%d] getRuleBadRequest  %+v", 400, o.Payload)
}

func (o *GetRuleBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *GetRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleUnauthorized creates a GetRuleUnauthorized with default headers values
func NewGetRuleUnauthorized() *GetRuleUnauthorized {
	return &GetRuleUnauthorized{}
}

/*GetRuleUnauthorized handles this case with default header values.

If not authenticated
*/
type GetRuleUnauthorized struct {
}

func (o *GetRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}][%d] getRuleUnauthorized ", 401)
}

func (o *GetRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRuleForbidden creates a GetRuleForbidden with default headers values
func NewGetRuleForbidden() *GetRuleForbidden {
	return &GetRuleForbidden{}
}

/*GetRuleForbidden handles this case with default header values.

If authenticated but not authorized
*/
type GetRuleForbidden struct {
}

func (o *GetRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}][%d] getRuleForbidden ", 403)
}

func (o *GetRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRuleInternalServerError creates a GetRuleInternalServerError with default headers values
func NewGetRuleInternalServerError() *GetRuleInternalServerError {
	return &GetRuleInternalServerError{}
}

/*GetRuleInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type GetRuleInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *GetRuleInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}][%d] getRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRuleInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *GetRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
