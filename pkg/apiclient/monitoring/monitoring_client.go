// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitoring API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitoring API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteResourceRules(params *DeleteResourceRulesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceRulesOK, error)

	DeleteRule(params *DeleteRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRuleOK, error)

	GetRule(params *GetRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetRuleOK, error)

	GetRules(params *GetRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRulesOK, error)

	ListAlerts(params *ListAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAlertsOK, error)

	ListResourceAlerts(params *ListResourceAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListResourceAlertsOK, error)

	ListRules(params *ListRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRulesOK, error)

	ListTeamAlerts(params *ListTeamAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamAlertsOK, error)

	ListTeamRules(params *ListTeamRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamRulesOK, error)

	PurgeRuleAlerts(params *PurgeRuleAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*PurgeRuleAlertsOK, error)

	UpdateAlert(params *UpdateAlertParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlertOK, error)

	UpdateRule(params *UpdateRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteResourceRules deletes all the rules on a specific resource
*/
func (a *Client) DeleteResourceRules(params *DeleteResourceRulesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteResourceRules",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourceRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteResourceRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRule deletes a rule and all history from a resource
*/
func (a *Client) DeleteRule(params *DeleteRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRule returns the definition of a rule in kore
*/
func (a *Client) GetRule(params *GetRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRule",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRules gets all the on a specific resource in kore
*/
func (a *Client) GetRules(params *GetRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRules",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAlerts returns all available alerts currently in kore
*/
func (a *Client) ListAlerts(params *ListAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAlerts",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListResourceAlerts useds to retrieve the alerts on a resource
*/
func (a *Client) ListResourceAlerts(params *ListResourceAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListResourceAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListResourceAlerts",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListResourceAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListResourceAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRules returns all available rules currently in kore
*/
func (a *Client) ListRules(params *ListRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRules",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTeamAlerts returns all available alerts currently in kore
*/
func (a *Client) ListTeamAlerts(params *ListTeamAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamAlerts",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/teams/{team}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTeamAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTeamAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTeamRules returns all available rules related to the team resources
*/
func (a *Client) ListTeamRules(params *ListTeamRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListTeamRules",
		Method:             "GET",
		PathPattern:        "/api/v1alpha1/monitoring/teams/{team}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTeamRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTeamRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurgeRuleAlerts purges the history of alerts or a given rule
*/
func (a *Client) PurgeRuleAlerts(params *PurgeRuleAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*PurgeRuleAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurgeRuleAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PurgeRuleAlerts",
		Method:             "DELETE",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PurgeRuleAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurgeRuleAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PurgeRuleAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAlert useds to store an alert in kore
*/
func (a *Client) UpdateAlert(params *UpdateAlertParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAlert",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/monitoring/alerts/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRule updates or creates a rule in kore
*/
func (a *Client) UpdateRule(params *UpdateRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRule",
		Method:             "PUT",
		PathPattern:        "/api/v1alpha1/monitoring/rules/{group}/{version}/{kind}/{namespace}/{resource}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
