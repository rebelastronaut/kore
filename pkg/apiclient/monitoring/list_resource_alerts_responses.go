// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// ListResourceAlertsReader is a Reader for the ListResourceAlerts structure.
type ListResourceAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListResourceAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListResourceAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListResourceAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListResourceAlertsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListResourceAlertsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListResourceAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListResourceAlertsOK creates a ListResourceAlertsOK with default headers values
func NewListResourceAlertsOK() *ListResourceAlertsOK {
	return &ListResourceAlertsOK{}
}

/*ListResourceAlertsOK handles this case with default header values.

The alert has been successfully stored
*/
type ListResourceAlertsOK struct {
	Payload *models.V1beta1AlertList
}

func (o *ListResourceAlertsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}][%d] listResourceAlertsOK  %+v", 200, o.Payload)
}

func (o *ListResourceAlertsOK) GetPayload() *models.V1beta1AlertList {
	return o.Payload
}

func (o *ListResourceAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1AlertList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourceAlertsBadRequest creates a ListResourceAlertsBadRequest with default headers values
func NewListResourceAlertsBadRequest() *ListResourceAlertsBadRequest {
	return &ListResourceAlertsBadRequest{}
}

/*ListResourceAlertsBadRequest handles this case with default header values.

Validation error of supplied parameters/body
*/
type ListResourceAlertsBadRequest struct {
	Payload *models.ValidationError
}

func (o *ListResourceAlertsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}][%d] listResourceAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *ListResourceAlertsBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *ListResourceAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourceAlertsUnauthorized creates a ListResourceAlertsUnauthorized with default headers values
func NewListResourceAlertsUnauthorized() *ListResourceAlertsUnauthorized {
	return &ListResourceAlertsUnauthorized{}
}

/*ListResourceAlertsUnauthorized handles this case with default header values.

If not authenticated
*/
type ListResourceAlertsUnauthorized struct {
}

func (o *ListResourceAlertsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}][%d] listResourceAlertsUnauthorized ", 401)
}

func (o *ListResourceAlertsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListResourceAlertsForbidden creates a ListResourceAlertsForbidden with default headers values
func NewListResourceAlertsForbidden() *ListResourceAlertsForbidden {
	return &ListResourceAlertsForbidden{}
}

/*ListResourceAlertsForbidden handles this case with default header values.

If authenticated but not authorized
*/
type ListResourceAlertsForbidden struct {
}

func (o *ListResourceAlertsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}][%d] listResourceAlertsForbidden ", 403)
}

func (o *ListResourceAlertsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListResourceAlertsInternalServerError creates a ListResourceAlertsInternalServerError with default headers values
func NewListResourceAlertsInternalServerError() *ListResourceAlertsInternalServerError {
	return &ListResourceAlertsInternalServerError{}
}

/*ListResourceAlertsInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type ListResourceAlertsInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *ListResourceAlertsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/monitoring/alerts/resource/{group}/{version}/{kind}/{namespace}/{resource}][%d] listResourceAlertsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListResourceAlertsInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *ListResourceAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
