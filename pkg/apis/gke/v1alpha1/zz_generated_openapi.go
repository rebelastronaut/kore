// +build !ignore_autogenerated

/**
 * Copyright 2020 Appvia Ltd <info@appvia.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKE":                  schema_pkg_apis_gke_v1alpha1_GKE(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentials":       schema_pkg_apis_gke_v1alpha1_GKECredentials(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec":   schema_pkg_apis_gke_v1alpha1_GKECredentialsSpec(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus": schema_pkg_apis_gke_v1alpha1_GKECredentialsStatus(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec":              schema_pkg_apis_gke_v1alpha1_GKESpec(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus":            schema_pkg_apis_gke_v1alpha1_GKEStatus(ref),
	}
}

func schema_pkg_apis_gke_v1alpha1_GKE(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKE is the Schema for the gkes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentials is the Schema for the gkecredentials API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentialsSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentialsSpec defines the desired state of GKECredentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "Project is the GCP project these credentias pretain to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is the GCP region you wish to the cluster to reside within",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"account": {
						SchemaProps: spec.SchemaProps{
							Description: "Account is the credentials used to speak the GCP APIs; you create a service account under the Cloud IAM within the project, adding the permissions 'Compute Admin' role to the service account via IAM tab. Once done you can create a key under 'Service Accounts' and copy and paste the JSON payload here. This is deprecated, please use a Secret and CredentialsRef",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentialsRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsRef is a reference to the credentials used to create clusters",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"project"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentialsStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentialsStatus defines the observed state of GKECredentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a collection of potential issues",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Condition"),
									},
								},
							},
						},
					},
					"verified": {
						SchemaProps: spec.SchemaProps{
							Description: "Verified checks that the credentials are ok and valid",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Condition"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKESpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKESpec defines the desired state of GKE",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Description: "Cluster refers to the cluster this object belongs to",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description provides a short summary / description of the cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the kubernetes version which the cluster master should be configured with. '-' gives the current GKE default version, 'latest' gives most recent, 1.15 would be latest 1.15.x release, 1.15.1 would be the latest 1.15.1 release, and 1.15.1-gke.1 would be the exact specified version. Must be blank if following release channel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"releaseChannel": {
						SchemaProps: spec.SchemaProps{
							Description: "ReleaseChannel is the GKE release channel to follow, '' (to follow no channel), 'STABLE' (only battle-tested releases every few months), 'REGULAR' (stable releases every few weeks) or 'RAPID' (bleeding edge, not suitable for production workloads). If anything other than '', Version must be blank.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authorizedMasterNetworks": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "AuthorizedMasterNetworks is a collection of authorized networks which is permitted to speak to the kubernetes API, default to all if not provided.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.AuthorizedNetwork"),
									},
								},
							},
						},
					},
					"servicesIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "ServicesIPV4Cidr is an optional network cidr configured for the cluster services",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is the gcp region you want the cluster to reside",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterIPV4Cidr is an optional network CIDR which is used to place the pod network on",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableHorizontalPodAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableHorizontalPodAutoscaler indicates if the cluster is configured with the horizontal pod autoscaler addon. This automatically adjusts the cpu and memory resources of pods in accordance with their demand. You should ensure you use PodDisruptionBudgets if this is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableHTTPLoadBalancer": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableHTTPLoadBalancer indicates if the cluster should be configured with the GKE ingress controller. When enabled GKE will autodiscover your ingress resources and provision load balancer on your behalf.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableIstio": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableIstio indicates if the GKE Istio service mesh is deployed to the cluster; this provides a more feature rich routing and instrumentation.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableShieldedNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableShieldedNodes indicates we should enable the shielded nodes options in GKE. This protects against a variety of attacks by hardening the underlying GKE node against rootkits and bootkits.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableStackDriverLogging": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableStackDriverLogging indicates if Stackdriver logging should be enabled for the cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableStackDriverMetrics": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableStackDriverMetrics indicates if Stackdriver metrics should be enabled for the cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enablePrivateEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "EnablePrivateEndpoint indicates whether the Kubernetes API should only be accessible from internal IP addresses",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enablePrivateNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "EnablePrivateNetwork indicates if compute nodes should have external ip addresses or use private networking and a cloud-nat device.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"masterIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterIPV4Cidr is network range used when private networking is enabled. This is the peering subnet used to to GKE master api layer. Note, this must be unique within the network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenanceWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "MaintenanceWindow is the maintenance window provided for GKE to perform upgrades if enabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Tags is a collection of tags related to the cluster type",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"nodePools": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "NodePools is the set of node pools for this cluster. Required unless ALL deprecated properties except subnetwork are set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKENodePool"),
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. Size is the number of nodes per zone which should exist in the cluster.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxSize": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. MaxSize assuming the autoscaler is enabled this is the maximum number nodes permitted",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"diskSize": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. DiskSize is the size of the disk used by the compute nodes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"imageType": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. ImageType is the operating image to use for the default compute pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. MachineType is the machine type which the default nodes pool should use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: This was always ignored. May be re-introduced in future. Subnetwork is name of the GCP subnetwork which the cluster nodes should reside -",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. EnableAutoscaler indicates if the cluster should be configured with cluster autoscaling turned on",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableAutoupgrade": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. EnableAutoUpgrade indicates if the cluster should be configured with auto upgrading enabled; meaning both nodes are masters are scheduled to upgrade during your maintenance window.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableAutorepair": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Set on node group instead, this property is now ignored. EnableAutorepair indicates if the cluster should be configured with auto repair is enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Not used - now projects are created automatically, always use default. Network is the GCP network the cluster reside on, which have to be unique within the GCP project and created beforehand.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"description", "version", "releaseChannel", "authorizedMasterNetworks", "servicesIPV4Cidr", "clusterIPV4Cidr", "enableHorizontalPodAutoscaler", "enableHTTPLoadBalancer", "enableIstio", "enableShieldedNodes", "enableStackDriverLogging", "enableStackDriverMetrics", "enablePrivateEndpoint", "enablePrivateNetwork", "masterIPV4Cidr", "maintenanceWindow"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Ownership", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.AuthorizedNetwork", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKENodePool"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKEStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKEStatus defines the observed state of GKE",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is the status of the components",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"caCertificate": {
						SchemaProps: spec.SchemaProps{
							Description: "CACertificate is the certificate for this cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint is the endpoint of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component"},
	}
}
