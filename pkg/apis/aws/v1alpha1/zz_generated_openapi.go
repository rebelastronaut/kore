// +build !ignore_autogenerated

/**
 * Copyright 2020 Appvia Ltd <info@appvia.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSAccount":            schema_pkg_apis_aws_v1alpha1_AWSAccount(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSAccountClaim":       schema_pkg_apis_aws_v1alpha1_AWSAccountClaim(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganization":       schema_pkg_apis_aws_v1alpha1_AWSOrganization(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationSpec":   schema_pkg_apis_aws_v1alpha1_AWSOrganizationSpec(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationStatus": schema_pkg_apis_aws_v1alpha1_AWSOrganizationStatus(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimSpec":      schema_pkg_apis_aws_v1alpha1_AccountClaimSpec(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimStatus":    schema_pkg_apis_aws_v1alpha1_AccountClaimStatus(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountSpec":           schema_pkg_apis_aws_v1alpha1_AccountSpec(ref),
		"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountStatus":         schema_pkg_apis_aws_v1alpha1_AccountStatus(ref),
	}
}

func schema_pkg_apis_aws_v1alpha1_AWSAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSAccount is the Schema for the AccountClaims API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountSpec", "github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AWSAccountClaim(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSAccountClaim is the Schema for the AccountClaims API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimSpec", "github.com/appvia/kore/pkg/apis/aws/v1alpha1.AccountClaimStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AWSOrganization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSOrganization is the Schema for the organization API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationSpec", "github.com/appvia/kore/pkg/apis/aws/v1alpha1.AWSOrganizationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AWSOrganizationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSOrganizationSpec defines the desired state of an AWS Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ssoUser": {
						SchemaProps: spec.SchemaProps{
							Description: "SsoUser is the user who will be the organisational account owner for all accounts",
							Ref:         ref("github.com/appvia/kore/pkg/apis/aws/v1alpha1.SSOUser"),
						},
					},
					"ouName": {
						SchemaProps: spec.SchemaProps{
							Description: "OuName is the name of the parent Organizational Unit (OU) to use for provisioning accounts",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is the region where control tower is enabled in the master account",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"roleARN": {
						SchemaProps: spec.SchemaProps{
							Description: "RoleARN is the role to assume when provisioning accounts",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentialsRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialsRef is a reference to the credentials used to provision the accounts",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"ssoUser", "ouName", "region", "roleARN", "credentialsRef"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/aws/v1alpha1.SSOUser", "k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AWSOrganizationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSOrganizationStatus defines the observed state of Organization",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"accountID": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountID is the AWS Account ID used for the master account",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AccountClaimSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountClaimSpec defines the desired state of AccountClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accountName": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountName is the name of the account to create",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization is the AWS organization",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
				},
				Required: []string{"accountName", "organization"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Ownership"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AccountClaimStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountClaimStatus defines the observed state of AWS Account",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialRef is the reference to the credentials secret",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"accountID": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountID is the aws account id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accountRef": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountRef is a reference to the underlying aws account",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component", "github.com/appvia/kore/pkg/apis/core/v1.Ownership", "k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AccountSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountSpec defines the desired state of AccountClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accountName": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountName is the name of the account to create. We do this internally so we can easily change the account name without changing the resource name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is the default aws region resources will be created in for this account",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"organization": {
						SchemaProps: spec.SchemaProps{
							Description: "Organization is a reference to the aws organisation to use",
							Ref:         ref("github.com/appvia/kore/pkg/apis/core/v1.Ownership"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels are a set of labels on the project",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"accountName", "region", "organization"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Ownership"},
	}
}

func schema_pkg_apis_aws_v1alpha1_AccountStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountStatus defines the observed state of an AWS Account",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentialRef": {
						SchemaProps: spec.SchemaProps{
							Description: "CredentialRef is the reference to the credentials secret",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"accountID": {
						SchemaProps: spec.SchemaProps{
							Description: "AccountID is the aws account id",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceCatalogProvisioningID": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceCatalogProvisioningID is the control tower account factory, service catalog provisioning record ID. If set, creation is being tracked",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a set of components conditions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component", "k8s.io/api/core/v1.SecretReference"},
	}
}
