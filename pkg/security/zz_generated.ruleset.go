// Code generated for package security by go-bindata DO NOT EDIT. (@generated)
// sources:
// rules/eks.yaml
// rules/gke.yaml
// rules/kubernetes.yaml
package security

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rulesEksYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x90\xcf\x6e\x13\x31\x10\xc6\xef\xfb\x14\x9f\xd2\xf3\x46\x70\x8d\xd4\x43\x04\x11\x42\x91\x68\xa5\x96\x53\x55\xa1\x89\x3d\x49\xac\xf8\xcf\xe2\x99\x6d\x14\x01\xef\xc2\xb3\xf0\x64\xc8\x76\x9a\x34\x80\xe0\xca\x6d\x6d\xcf\xfe\xbe\xef\x37\x7d\xdf\x77\x3d\x22\x05\x9e\x61\xb1\xbc\xc3\x7c\xd4\x24\x86\xbc\x8b\x9b\x0e\x30\xc9\xb6\xfb\x7e\xfe\xf1\xfe\xa6\x7f\xf5\xba\x03\x44\x49\x47\x99\x61\x4f\x39\xb6\x29\xcb\x62\xb2\x1b\xd4\xa5\x38\xc3\xd7\x0e\x00\xae\xae\x70\xf3\xc4\xf9\xc9\xf1\xbe\xab\x17\xf7\x5b\x27\xc8\xa3\x67\x98\x2d\x9b\x9d\x40\xb7\x7c\x44\x21\xad\xeb\x89\xce\xd1\x48\x95\x26\xd3\xee\x48\xfb\xf1\xfd\x2d\x2b\x39\x2f\xed\x62\xfe\x72\x34\xd6\xe2\x03\xe7\xe0\xb4\x71\x4d\x8a\x9a\x93\xc7\xe0\x29\x42\x53\x25\x07\x52\x67\xc8\xfb\x03\xca\x8f\x5c\xe6\x2a\x6a\x9f\xf2\x8e\x33\x62\xb2\x2c\x70\x11\x54\x3f\x31\xa4\xe4\xcb\xaf\x81\x59\x2b\x33\xf3\xe7\xd1\x65\xb6\xb0\x1c\x28\xda\x53\x33\xbc\x0f\x03\x19\x6d\xc7\x0f\x49\xc1\x91\x56\x9e\xed\x6f\x4a\x86\x22\x32\xcb\xe8\xb5\xc6\x0c\x83\x77\x86\x8a\x25\x56\x6c\x52\x28\x23\x42\x3a\x66\x52\xb6\x58\x1d\x2a\x2f\x8f\x51\x5d\xe0\x97\x99\x65\x87\xcf\x5b\x1e\xc8\xec\x68\xc3\x10\x36\x63\x76\x7a\x68\x25\x2c\xaf\xa9\xa4\x04\xd9\xe0\x1a\x93\x77\xcb\xc5\xc5\xbe\x9c\x9c\x2a\xa6\x08\xf2\xfe\x2c\x2c\x93\x46\x28\x7b\x7b\x08\xb2\x79\xc4\x97\x7a\x06\x5c\x1c\x46\x9d\xee\x5c\xb4\xb8\xbe\xc6\xe4\xd6\x53\x9c\x5c\x3c\xc9\xc0\xe6\xfc\xbe\x58\xde\xfd\xe1\xd9\xa4\xb8\x76\x9b\x62\xe8\x52\x9c\x96\xd4\xdb\x12\xfa\xf0\xe9\x71\xda\x1a\x3d\xd7\xe4\x5c\x28\x6b\xf2\xc2\x47\x4a\x71\x99\x35\xf0\xaf\x32\xd6\xc9\xc9\x26\x45\x46\xca\x08\x29\xf3\x85\x55\x41\x7c\x6b\x6e\xc6\x8f\xa2\x9c\xff\xaa\xf7\xa6\xcd\xfc\x67\x86\xff\x16\xfc\x19\x00\x00\xff\xff\x62\xd5\x53\x41\xcd\x03\x00\x00")

func rulesEksYamlBytes() ([]byte, error) {
	return bindataRead(
		_rulesEksYaml,
		"rules/eks.yaml",
	)
}

func rulesEksYaml() (*asset, error) {
	bytes, err := rulesEksYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/eks.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesGkeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xcd\x72\x1b\xc7\x11\xbe\xf3\x29\x3a\xf4\x41\x49\x15\xc1\xa2\x12\x27\x07\x55\x78\x60\x68\x96\xa4\x92\xc5\xa0\x48\x4a\x3e\xb8\x5c\xa9\xc6\x4c\x03\x3b\xe6\xec\xcc\x7a\x7e\x00\xc2\x49\xde\x25\xcf\x92\x27\x4b\xf5\xfc\x2c\x76\x41\x90\xa2\x68\x32\x96\x6f\x5c\xee\x4e\xf7\xd7\x33\xdf\xd7\x3f\x83\xc9\x64\xb2\x37\x01\x83\x2d\xbd\x82\xd7\xef\xce\x60\x6a\x25\x9c\xc4\x60\x27\x5e\xa0\x56\x66\xb1\x07\x20\xac\xcc\x2f\x27\x6f\xa6\x27\x7b\x00\x3e\x60\x88\xfe\x15\xac\xd0\x99\xfc\x85\x24\x2f\x9c\xea\x82\xb2\xe6\x15\xfc\x6b\x0f\x00\xe0\xab\xaf\xe0\xef\x4b\x72\x4b\x45\xab\xbd\xf4\x8f\xab\x46\x79\x70\x51\x13\x88\x86\xc4\xb5\x87\xd0\x10\x78\x0a\x41\x99\x05\xd8\x79\x7a\x6c\xac\x53\x3f\x5b\x13\x50\x43\x67\x25\x60\xc5\x41\x6e\xaf\x18\xfd\xef\x7f\xbe\xa1\x80\x4a\xfb\x6a\xf4\xbe\x45\xa0\x4c\x8a\x09\xb5\xb6\xab\xec\x50\x58\x13\x9c\xd5\x93\x4e\xa3\x21\x08\x36\x59\x91\x6b\x83\xad\x12\xa8\xf5\x1a\xd2\x4a\x58\xdb\xe8\xc0\x51\xa7\x95\x40\x0f\x33\xf4\xe4\xc1\x9a\x64\xc1\x45\x13\x54\x4b\xe0\xe8\xa7\xa8\x1c\xb5\x64\x82\x3f\xac\xf0\xe0\x6d\xdb\xa1\x08\xf9\xf1\x72\xa5\x82\x68\x38\xbc\x1c\xaa\x5b\x2a\x41\x60\xe7\xf3\xfa\xb7\x07\x47\xad\x5d\x52\x86\x36\x27\x0c\xd1\x11\xcc\xad\xe3\xe7\x64\xa2\xc0\x85\x0a\x17\x5a\x34\xb8\xa0\x0c\x64\x08\x4f\x32\x3c\x49\x2d\x1a\x99\xc0\xf0\x46\xd7\xa3\xe8\x50\x5c\xf3\x22\x4f\x22\x3a\x15\xd6\x19\x9d\xa4\x39\x46\x1d\xa0\xf5\x0b\x38\x86\xfd\x37\x9b\x5d\xac\x14\xa8\x9b\xe8\x81\x0c\xce\x34\xc9\xfd\xbc\x92\xc1\x7c\xdf\xfa\xc5\x0f\xf0\xcf\xf4\x0c\xa0\x4c\x17\xc3\xe1\xb5\x32\x12\x8e\x8f\x61\x7f\xaa\xd1\xec\x8f\x5e\xf9\x8e\xc4\xe6\xfd\xeb\x77\x67\xf5\xb5\xb1\x61\xf8\x89\xb0\x66\xae\x16\xd1\x21\x53\xe9\x30\xbb\xdd\x20\x9b\x5a\xb9\xc1\x55\x0c\x30\xfc\x57\x9f\xc2\x2f\x95\x4f\x01\x30\x21\x78\xeb\xba\x1e\xe0\xbf\xf7\x46\xec\xbf\x6c\x14\x69\x49\x12\xce\xad\x24\x3f\xe2\xfe\xe5\x9b\x6f\x26\x47\x2f\x9f\x96\xfe\xec\xd2\x57\x97\x86\x5d\x56\x45\xf8\x9e\x51\x23\xbe\xf7\xf8\x78\x65\xc2\x08\xe8\x08\x66\x51\xe9\x90\x08\x6a\x3b\xd6\xd2\xa9\x6d\xbb\x18\x08\xce\xcc\x42\x19\xda\xac\xfa\xf8\xde\x1f\x26\x3b\xdf\x35\x64\x76\x19\xdb\x9c\xf5\x41\x0f\xb0\x45\x1f\xc8\x41\x64\x0d\x20\x08\xb7\xee\x82\x5d\x38\xec\x1a\x25\x32\x47\x39\x1e\xe6\xe6\x92\x9c\x9a\xaf\x21\x34\x18\x80\x96\xe4\xd6\x29\x24\xde\xf3\x24\x27\xa1\x63\x32\xa4\xd8\xcc\x52\xb9\x10\x51\x43\x8b\xac\x90\x4c\x76\x17\x0d\x6f\x68\x52\xad\xb5\x0b\x4d\x2f\x3c\x48\x0c\x08\x82\x4c\x20\x77\x98\xf7\x50\xab\x56\x85\xbc\x7d\x38\x53\x5a\x85\x35\x47\x8c\x06\x30\x04\x14\xd7\x85\x18\xc1\x82\x6a\x3b\x72\xde\x1a\x0c\x04\xb8\x13\xca\x7d\xb2\x25\x09\x81\xdd\x55\x55\xb2\x6c\x1d\xc9\x28\x8a\x5a\xed\x92\x1c\x6a\xdd\x8b\xaa\xa6\xb0\xa1\xe9\xcf\x16\xe1\xe5\x98\x0b\xbf\xaa\xec\x2a\x96\xaa\x84\xa1\xd8\xb6\x70\xda\x44\x7d\x68\x38\x17\x11\x99\x5e\x6e\x55\x62\x43\x85\x5d\x90\x26\xf4\x04\xa7\x0d\x1a\x43\x7a\x24\xb1\x8f\x97\x17\xcf\x22\x31\x91\x7d\x31\x41\xbd\xb2\x66\xb7\xb4\xf8\xc3\xce\xd9\xa5\x92\x29\x2f\x27\x94\x1e\x96\x0a\xeb\x43\x35\xe3\x53\x86\x7e\x17\x67\xe4\x0c\x05\xf2\x07\xb9\xbe\x24\xe6\x86\x5a\x52\x06\x79\x7a\x9c\xc3\x0b\x86\xc4\x59\xf0\xc1\x11\xb6\x89\x3a\xe4\x03\xc9\xfa\xf6\x10\xde\x86\x17\x79\xd3\x1d\x09\xdb\xb6\x64\x78\xb7\xd7\x36\xf2\xd6\xac\x61\xa5\x42\x53\x52\xd9\xf0\xfd\xc5\xd9\xeb\x0f\xdf\x9e\x5c\x80\x75\x70\x79\x75\xf2\xb7\x6f\xcf\x2a\xf4\xa2\xd3\x0c\x7f\x37\xeb\xaf\x36\xdc\x65\x85\xce\x88\xe3\x29\x79\x65\x3e\x07\x63\xcd\x64\xe8\x6a\x6b\x4f\x1e\x47\xf7\x0f\x9e\x9d\xdc\x63\xf6\x19\x98\x5f\xb9\xf0\xea\xf8\x6e\x01\x14\x14\x1b\x8a\x0e\x17\xfe\xee\x18\xf6\xcb\x46\x6f\xdb\xe4\x57\x79\xe3\xf7\xb7\x04\x73\x6e\x03\xc4\x5b\xd1\x32\xe5\x2a\x1f\xfa\x88\x77\x54\xa5\x8f\x85\xb7\x23\xad\x9c\x5d\x4c\x8e\xfe\xf8\xf4\x5a\xe9\xf9\x99\xd6\xdf\x51\x86\x1e\xae\x15\x66\xb2\xbf\x45\xe2\xe8\x69\xd3\xe2\x54\x55\xfd\xbe\xec\xea\x41\x21\xef\x1f\xc0\x61\x68\x28\x35\x43\x86\x0d\xaf\xb9\xc2\xcd\xd5\xcd\x46\x27\x1e\xd0\x27\x83\xaf\x4f\xa7\xd9\x18\x1a\x08\x78\x4d\x20\x30\xe5\xec\x14\x56\xec\x16\x0e\x25\x41\x87\xa1\xf1\x80\x46\xf2\x5f\xb9\x31\xb3\xa5\x20\xcc\xa8\x41\x3d\xbf\xa3\x1e\x74\x24\xd4\x7c\xcd\x9f\x23\xf8\xf4\xa0\xc4\x68\xaf\x3a\x8d\x22\xa5\x41\xca\x04\x42\x0d\x8e\x7c\x67\x8d\x57\xb5\x42\x19\x50\xc9\x18\x7b\xf3\xa4\xe7\x5c\xa0\x3a\x72\x73\xeb\x5a\x88\x9d\xc4\x40\x63\x64\x8f\x13\x54\x4a\x76\x45\xc4\x15\x5c\xa5\xdd\x73\x0b\xab\xfa\xbb\x4f\x58\xcb\x9e\xc8\xc3\x15\x2c\x9b\x6d\xc1\x0c\x23\xe1\xba\x32\xd8\xf9\xba\xcc\x53\xd8\xa9\x96\xa9\x53\x4b\xae\xf9\xe7\x14\x56\xd6\x5d\x6f\xcf\x30\xe7\x67\x57\xcf\x52\x64\xba\xe2\xd6\xf4\x6e\x1f\xa2\xa1\x5b\x6b\xea\x44\x40\x37\x81\x1c\x33\x09\xa5\x74\xe4\x59\x5f\x73\x67\xdb\xe4\x8e\xbf\x25\x97\x8b\x6f\xed\xe7\x94\x68\xa0\x25\x34\x1e\x56\x6c\x8f\xdb\x17\x0b\xc2\x51\xee\x7e\xaa\xa3\x8e\xc8\xb1\x17\x61\x8d\x21\x91\xaa\xf6\x8c\xc2\x8a\x8b\x76\xd5\x63\xda\xf9\x51\xc9\x62\x5e\x6e\xbb\x4d\x62\xe7\x7f\xe6\xee\xf0\xed\xf4\xe3\xd7\xa7\x4a\xba\xda\xbe\x66\x54\xe7\x36\x50\xee\xa2\x4a\x87\xc0\xfd\x94\x32\x74\x00\xb3\x18\xb8\x58\x4a\xcb\x3d\xa7\x11\xd1\xe5\xb6\x9c\x0c\xea\x50\x3a\xc8\x15\xab\x3e\x05\x90\x0f\x07\x86\xed\x15\x8b\x65\xdd\x13\x64\xd3\xfe\xf2\x9c\x85\x6d\xbf\xa1\xf0\xfe\xc3\xe5\x15\x90\xf1\xdc\xc1\x6d\xd0\xe6\x54\x91\xe0\xc6\x99\xa1\xc0\xb8\xa2\x51\x3f\x45\x1a\x56\xd6\x6a\x83\xc3\x4f\x40\xb9\x69\xe2\xb6\x4f\x63\xb7\x3b\x53\x7c\x37\x84\xdc\xa3\x5b\xa5\xb3\x71\xe4\x95\xa4\x11\xc8\xce\xd9\x1f\x49\x84\xea\x28\x77\xdc\xd1\x17\x7c\x4c\xb3\x9a\x44\x74\x9e\x0a\x6f\x05\x92\x83\xd8\x06\x97\x82\x00\x34\x96\xb3\xe7\x26\xd6\xe4\x1a\x7b\x77\x8f\xcf\x30\xd3\xdb\xac\x1d\xcc\x58\xcf\x90\x5a\x3e\xd1\xa9\x16\x3c\x45\xef\xbc\x38\xb8\x48\x3b\x12\xca\x6e\xe0\xbe\xf6\xfb\x76\xf7\x4c\x58\x47\xc9\xed\x44\x72\xf4\xa7\x27\xbe\x0b\x49\xa6\x6a\xd1\xc2\x18\x2c\x8f\xf8\xa8\x5c\x25\x4d\xca\x18\x9a\x25\x6e\xfb\x11\x66\xd0\xcd\x8d\xb2\xcb\x00\x34\x2f\x4f\x4b\xc9\xf5\x93\xd3\x50\xe0\x9c\x28\xea\xa7\xf9\x5d\x1e\x1e\x1d\x79\x1b\x9d\x28\xcd\x7f\xec\x8a\x10\x56\x86\x8b\xee\xae\x5b\x90\x54\x5c\x16\xac\xe8\x43\x3a\x64\x59\x3b\x4a\x37\x13\xda\xa2\xdc\x2d\x98\x94\x20\x1a\x5c\x66\xd7\xaa\x9f\x7e\xeb\xe4\x53\x33\x9a\x75\xd7\x6c\xc4\x43\xab\x16\x4d\x48\x5c\x9f\x51\xbe\xaa\x91\xc9\x10\x0a\x61\x9d\x54\x66\xa1\xd7\x1c\x0e\x87\xf1\x4b\x2e\x43\xb6\x8e\x7d\x30\x16\xf3\x66\xf2\xd8\x97\xc6\xc9\xce\x5a\xed\x9f\x84\xef\x0f\xa3\x3b\x3b\x9d\xb2\xcf\xef\xff\xf1\x43\xe1\xfe\xe0\x9e\xe3\x18\xe6\xa8\xfd\x2e\xde\x6f\x85\xd2\xdf\x86\x70\x9b\x67\x88\xd9\xd4\x5a\x47\xa3\x98\x8a\x0e\x52\xf2\xc8\x4c\xbb\x37\xb8\xd3\xfc\xcd\x17\x15\xdf\x03\xc2\xdb\x96\x39\x5c\x24\xc1\x8d\x65\xfe\xf5\x17\x2e\xf3\xc1\xf2\x4f\xc9\x9c\xbd\xb5\x18\xca\x55\xa7\xa3\xd4\xb8\xe6\x82\x9e\xcc\xe5\x52\xd5\xe0\x92\x60\x8e\x4a\x53\xae\xfb\xd7\xfd\xa8\x0b\x0d\xa1\x0e\x4d\x09\xe7\x4e\x4d\x8f\x24\x3d\x96\x32\x37\xeb\x2d\xae\xb3\x8f\x68\x3c\x27\xde\xa8\xd3\x71\x95\xbb\x84\xda\x60\x70\x11\x4b\x06\xab\x4f\x6b\x04\xc3\xf8\x85\x92\x2e\x47\xfc\x85\x4b\xba\x1c\xe9\xfd\x94\x1f\x84\xf2\x5b\x93\xf4\x23\xe3\xfb\x4c\x49\x9f\x5b\x49\xfc\x76\xe7\x00\x7d\xf4\xe7\xe7\xd2\xb5\xa9\x6e\xeb\x94\x7a\xc7\x8f\x17\x27\x3a\x34\x36\x2e\x1a\x08\x24\x1a\x53\x44\xd9\x59\x9f\x1b\x3e\x6e\xdf\x53\x3d\x3d\xc8\xf7\x3e\x8d\x8d\x5a\x72\xcf\x38\xc3\x59\x12\x6f\x40\xb5\xe9\xda\x53\x43\x39\x10\x2a\x3f\xa7\x9f\x2c\x2a\x98\x34\x2a\xa7\xc6\xb0\x24\x85\xd4\xdb\xdf\x79\x17\xe4\x88\xb7\xdd\x58\x68\xf1\x47\xeb\x40\xa5\xb7\x65\x9e\x90\x30\x5b\x97\x9f\x42\x34\x1d\x80\x0a\x2f\x7c\x3e\x8e\x19\xf9\x00\x9d\x43\x11\x94\xe8\x7f\x5c\xb9\x26\xea\xd2\xd7\xfd\xcc\xae\x8c\x56\x65\xac\x48\x37\x67\xc3\x54\xd5\xff\xd0\x31\x9c\xe2\xb3\x9d\x4d\x70\xd5\xd2\xe1\x63\x13\xc1\x36\x31\x9e\x5e\xf0\x0f\x99\x86\x47\xda\xf8\xbc\xd1\xb8\x0f\x20\x65\x76\x1e\x90\xfb\xf1\xf8\xf6\x3e\x8d\x26\xe5\x67\x91\xff\xff\x2b\xda\xcf\x09\x74\x67\x22\x78\x8f\x37\x30\xb5\x72\xfc\xcb\xce\xd1\x5f\x9e\x38\x13\xa8\x9f\xfb\xbb\xa7\x16\x6f\xa0\xb3\xd2\x73\x59\xae\x03\xfb\xee\x6c\x70\x59\x5a\xdf\x54\x34\x97\xa8\x23\xcb\xc0\x02\xeb\x43\x24\xe9\x47\x23\xc9\x41\x0c\x4a\xb3\xfd\xcd\x40\xee\x8b\x5d\x96\x6d\xb2\x44\x37\x1d\x09\x96\x69\x65\xbe\xf2\xf0\xf2\xe5\xd1\x18\xc7\x6e\xe5\x9f\x26\x4f\x9a\xb8\x3a\xa7\x50\x72\x7d\x66\xbf\x29\x77\xe7\x59\x21\xff\xaf\x16\xec\x39\xe0\x18\x5b\x6e\xc9\x07\xb7\x05\x8f\xaf\xd8\xb7\x0e\xee\xd7\x2a\xcd\x2d\xde\xb0\xfb\x29\x39\x86\x04\x7f\xe5\x0d\xbd\x8f\xa9\xfd\xb9\x2b\xcf\x47\xf8\x25\x54\xdf\x27\x0a\xe1\x7f\x01\x00\x00\xff\xff\x91\x1d\xb8\x38\x31\x20\x00\x00")

func rulesGkeYamlBytes() ([]byte, error) {
	return bindataRead(
		_rulesGkeYaml,
		"rules/gke.yaml",
	)
}

func rulesGkeYaml() (*asset, error) {
	bytes, err := rulesGkeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/gke.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesKubernetesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\x1b\x37\x10\xbd\xeb\x2b\x5e\x9d\x83\x5b\xc0\x96\xed\x4b\x0e\x06\x7c\x70\xeb\x00\x11\x5c\x20\x82\xeb\xa0\x87\x20\x08\x28\x72\xa4\x25\xcc\x25\x17\x9c\x59\x6d\x85\x36\xff\x5e\x0c\xb9\x2b\xc9\x49\xdc\x43\xd0\x43\xa0\xd3\x2e\x97\x33\x6f\xde\x7b\xf3\x74\x7e\x7e\x3e\x3b\x47\x34\x2d\x5d\xe3\xb6\x97\x06\xcb\x9c\xfe\xda\x61\xb1\xc4\x83\x89\x1b\xe2\x19\x60\x93\xd3\xc3\xf7\x8f\x6f\x17\xcb\xf3\xcb\xab\x19\xc0\x62\xa4\xe7\x6b\x0c\x26\x47\x1f\x37\x33\xc0\x11\xdb\xec\x3b\xf1\x29\x5e\xe3\x9f\x19\x00\xbc\x7a\x85\x77\x5b\xca\x5b\x4f\xc3\xac\xbc\x78\x6c\x3c\x23\xf7\x81\x40\x91\xfb\x4c\x0c\x69\x8c\xc0\xa0\x0b\x26\x82\x3b\xb2\x7e\xed\x89\x11\x4d\xce\x69\xc0\xcf\x17\x57\xaf\x91\x32\xb8\x35\x21\x50\xfe\x45\x31\xe5\x09\x13\xb0\x4e\x19\xd2\x10\x4c\x2f\x0d\x45\xf1\xd6\x68\x73\x74\x05\xbe\x24\x18\x6b\xa9\x93\xf9\x6c\xc2\x72\x47\x62\x7c\xe0\xfa\xfc\x67\x43\x11\xf7\x29\x13\x6c\x26\x23\xc4\x30\xb8\xef\x57\x94\x23\xe9\x83\x0d\x3d\x0b\xe5\x33\x78\x41\xcf\x7a\x1a\xbf\xd9\xa7\xd4\xca\x7d\x54\x12\xe0\x23\x7b\x47\x75\xa6\xb1\x40\xc1\x71\xb8\x47\x05\x14\xb3\xbe\x56\xe8\xe3\x57\x73\x2c\x04\xbe\x4e\xb5\x22\x16\x74\xd9\x58\xf1\x96\xf4\xbb\x4c\x2c\xd9\x5b\x29\x17\x16\x4b\x18\xe7\xb2\x96\xa8\x4c\x80\xa2\x59\x05\x72\x58\xed\xe0\x68\x6d\xfa\x20\x48\x11\xa6\xd4\x3a\x06\x81\xa7\x98\x86\x08\x26\x41\x5a\x1f\x98\x9c\x7f\xa9\x4c\x26\xe9\x73\x54\x3a\x46\x6d\x31\x34\x94\x69\x12\x89\xbc\x34\x94\xe1\x92\xca\x94\x64\x14\x6d\x07\x13\xd5\x32\x95\x8e\x52\xf8\xac\x28\xb7\x97\xb4\x9e\xd7\x33\x0c\xde\x29\xaa\x46\x49\xc5\xc5\xd5\xeb\x83\x46\x8b\xb6\x33\x56\x26\x4c\x2f\x68\xeb\xa8\x0b\x69\x47\x0e\x9e\xc1\x64\xfb\x5c\x78\x5a\x11\x52\x47\x71\xa2\xd6\x47\x29\x62\x9e\x95\x5a\x9c\xe0\xd7\x88\xa4\xe4\x9b\xbc\x53\x59\x3d\x8f\x0e\x51\xfe\x0a\xd1\x7d\x9c\x18\x63\x0c\x5e\x9a\xd4\xcb\x9e\x7d\x25\x42\x1a\x3a\x0c\x38\xc7\xdb\x34\xd0\x56\x3d\x52\x09\xea\x12\xb3\x5f\x05\x3a\x2b\xed\xeb\xa0\xdc\xa4\x3e\x38\x85\x36\xd5\x21\x57\x01\x26\xa6\xe7\x7c\x8d\x55\x76\xa9\xcf\x30\xae\xf5\xd1\xb3\x64\x23\xa9\x60\x09\x61\x6f\x9c\x83\x6b\xb0\xce\xa9\x2d\xd4\xa9\x70\xd3\xd2\x75\xc6\x3e\x19\x6d\xad\xc4\x78\xd9\x55\x2e\x27\x6b\xb4\xbc\xc1\x0d\x4e\x6e\x43\x98\xda\x4e\x12\x39\xd8\x86\xec\x13\x39\x98\xe8\x60\x53\xdb\x05\x6f\xa2\x9c\xd4\xfb\xaa\xfd\x87\x96\x37\x1f\xf1\x77\x79\x06\x7c\xec\x7a\x99\x3f\xf9\xe8\x70\x73\x83\x93\x65\x30\xf1\xe4\xd9\x91\x16\x9e\xdb\x14\xd7\x7e\xd3\xe7\x22\xdf\x5c\xd5\x2c\xe9\x72\x1b\x42\x1a\xc8\x2d\x96\xfc\xe1\xd3\x47\x05\x74\x39\x2f\xbf\x8b\xcb\xa9\x86\x02\xbd\x56\xa4\xcf\x0d\x50\xb3\xa9\xa3\xdc\x7a\x91\xea\x80\x48\x32\xa4\xfc\x34\x32\x5e\x2c\xa0\x4e\xd9\xe3\xf9\x3c\x3b\xde\x85\xff\x1c\xe2\xb7\xfa\xcd\x8f\x34\x87\x3d\x86\xf4\x79\xb6\x4f\xea\xbb\x51\xd0\x47\x32\x2d\x1e\x52\xa0\x7d\x4c\xdf\xbf\xff\xf5\xcd\xa7\x87\x77\xbf\xbf\xf9\xe3\xff\x89\xea\x62\x0b\xd6\xf5\x99\x4c\x24\xda\x33\xa7\x40\x0a\xf0\xd8\x90\x1b\xbf\xd5\x4c\x4f\x09\x6d\x6f\x1b\x98\xc1\xec\x5e\x88\x5f\xdd\xed\xaf\xcb\x0d\x8d\xb7\x8d\x72\xe1\x63\x43\xd9\x4b\x8d\x35\x13\x82\x66\x70\x2e\xa9\xc9\x44\x2d\x63\x4b\x79\x87\x90\x12\xd7\x85\x54\xc7\x7a\xd6\xf6\xba\xa6\x66\x8f\xa7\xec\x51\x49\xbf\x10\x6a\x9b\x96\xda\x15\x65\x7e\x31\x6f\x26\x4c\x5d\xf6\x5b\x1f\x48\x17\x24\xad\xcb\x8c\x47\xd7\xb5\x57\x41\xd0\xf8\x4d\x73\x86\x81\x4e\x1d\xb8\xdf\x6c\x88\xa5\x5a\xad\x31\x71\x53\x02\x23\xe1\x54\x29\x3d\xfd\xae\x25\xbd\xfb\x16\xdd\x99\x6c\x6a\x5b\x8a\x8e\x9c\x66\xb9\xe6\xd2\xf7\xac\x68\x29\x77\x7d\xf3\xb2\xc5\x47\x2c\x6a\xaf\xd1\x5d\xfb\x6b\x3f\xdd\xe0\x44\xa7\xfa\xd2\xe2\x5f\xe3\xd5\x3f\x88\x63\xc0\x95\x8c\x72\x36\x19\xfa\xdf\x00\x00\x00\xff\xff\x85\xc0\x2d\xe0\x7e\x08\x00\x00")

func rulesKubernetesYamlBytes() ([]byte, error) {
	return bindataRead(
		_rulesKubernetesYaml,
		"rules/kubernetes.yaml",
	)
}

func rulesKubernetesYaml() (*asset, error) {
	bytes, err := rulesKubernetesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/kubernetes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rules/eks.yaml":        rulesEksYaml,
	"rules/gke.yaml":        rulesGkeYaml,
	"rules/kubernetes.yaml": rulesKubernetesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"rules": {nil, map[string]*bintree{
		"eks.yaml":        {rulesEksYaml, map[string]*bintree{}},
		"gke.yaml":        {rulesGkeYaml, map[string]*bintree{}},
		"kubernetes.yaml": {rulesKubernetesYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
