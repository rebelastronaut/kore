// Code generated by struct-gen; DO NOT EDIT.

package eks

// EKS Cluster Plan Schema
type Configuration struct {
	// AuthProxyAllowedIPRanges The networks which are allowed to connect to this cluster (e.g. via kubectl).
	AuthProxyAllowedIPRanges []ConfigurationAuthProxyAllowedIP `json:"authProxyAllowedIPs"`
	// AuthorizedMasterNetworks A collection of network cidr allowed to speak the EKS control plan
	AuthorizedMasterNetworks []ConfigurationAuthorizedMasterNetwork `json:"authorizedMasterNetworks,omitempty"`
	// ClusterUsers Users who should be allowed to access this cluster, will override any default role set above for these users
	ClusterUsers []ConfigurationClusterUser `json:"clusterUsers,omitempty"`
	// DefaultTeamRole The role that team members will have on this cluster if 'inherit team members' enabled
	DefaultTeamRole string `json:"defaultTeamRole,omitempty"`
	// Description Meaningful description of this cluster.
	Description string `json:"description"`
	// Domain The domain for this cluster.
	Domain                    string `json:"domain"`
	EnableDefaultTrafficBlock bool   `json:"enableDefaultTrafficBlock"`
	// InheritTeamMembers Whether team members will all have access to this cluster by default
	InheritTeamMembers bool                     `json:"inheritTeamMembers"`
	NodeGroups         []ConfigurationNodeGroup `json:"nodeGroups"`
	// PrivateIpv4Cidr The range of IPv4 addresses for your EKS cluster in CIDR block format
	PrivateIpv4Cidr string `json:"privateIPV4Cidr"`
	// Region The AWS region in which this cluster will reside
	Region string `json:"region"`
	// Version The Kubernetes version to deploy.
	Version string `json:"version"`
}

// The networks which are allowed to connect to this cluster (e.g. via kubectl).
type ConfigurationAuthProxyAllowedIP string

// A collection of network cidr allowed to speak the EKS control plan
type ConfigurationAuthorizedMasterNetwork string

// Users who should be allowed to access this cluster, will override any default role set above for these users
type ConfigurationClusterUser struct {
	Roles    []ConfigurationRole `json:"roles"`
	Username string              `json:"username"`
}

// A set of labels to help Kubernetes workloads find this group
type ConfigurationLabel string

type ConfigurationNodeGroup struct {

	// ComputeType Whether this node group is for general purpose or GPU workloads
	ComputeType string `json:"amiType,omitempty"`
	DesiredSize int64  `json:"desiredSize"`
	DiskSize    int64  `json:"diskSize"`
	// Ec2SSHKey Reference to an key which exists in your AWS account to allow SSH access to nodes
	Ec2SSHKey string `json:"eC2SSHKey,omitempty"`
	// EnableAutoscaler Will enable the cluster autoscaler to scale this specific nodegroup
	EnableAutoscaler bool   `json:"enableAutoscaler,omitempty"`
	InstanceType     string `json:"instanceType"`
	// Labels A set of labels to help Kubernetes workloads find this group
	Labels map[string]ConfigurationLabel `json:"labels,omitempty"`
	// MaxSize The maximum nodes this group should contain (if auto-scale enabled)
	MaxSize int64 `json:"maxSize,omitempty"`
	// MinSize The minimum nodes this group should contain (if auto-scale enabled)
	MinSize int64  `json:"minSize,omitempty"`
	Name    string `json:"name"`
	// ReleaseVersion Blank to use latest (recommended), if set must be for same Kubernetes version as the top-level plan version and for the same AMI type as specified for this node group.
	ReleaseVersion string `json:"releaseVersion,omitempty"`
	// SSHSecurityGroups Reference to security groups from which SSH access is permitted - must exist and be in same region as this cluster
	SSHSecurityGroups []ConfigurationSSHSourceSecurityGroup `json:"sshSourceSecurityGroups,omitempty"`
	Tags              map[string]ConfigurationTag           `json:"tags,omitempty"`
}

type ConfigurationRole string

// Reference to security groups from which SSH access is permitted - must exist and be in same region as this cluster
type ConfigurationSSHSourceSecurityGroup string

type ConfigurationTag string
