/**
 * Kore API
 * Kore API provides the frontend API (kore.appvia.io)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@appvia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1ManagedFieldsEntry model module.
 * @module model/V1ManagedFieldsEntry
 * @version 0.0.1
 */
class V1ManagedFieldsEntry {
    /**
     * Constructs a new <code>V1ManagedFieldsEntry</code>.
     * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
     * @alias module:model/V1ManagedFieldsEntry
     */
    constructor() { 
        
        V1ManagedFieldsEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1ManagedFieldsEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1ManagedFieldsEntry} obj Optional instance to populate.
     * @return {module:model/V1ManagedFieldsEntry} The populated <code>V1ManagedFieldsEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1ManagedFieldsEntry();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('fieldsType')) {
                obj['fieldsType'] = ApiClient.convertToType(data['fieldsType'], 'String');
            }
            if (data.hasOwnProperty('fieldsV1')) {
                obj['fieldsV1'] = ApiClient.convertToType(data['fieldsV1'], 'String');
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = ApiClient.convertToType(data['manager'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * @return {String}
     */
    getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * @param {String} apiVersion APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     */
    setApiVersion(apiVersion) {
        this['apiVersion'] = apiVersion;
    }
/**
     * Returns FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
     * @return {String}
     */
    getFieldsType() {
        return this.fieldsType;
    }

    /**
     * Sets FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
     * @param {String} fieldsType FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
     */
    setFieldsType(fieldsType) {
        this['fieldsType'] = fieldsType;
    }
/**
     * Returns FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
     * @return {String}
     */
    getFieldsV1() {
        return this.fieldsV1;
    }

    /**
     * Sets FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
     * @param {String} fieldsV1 FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
     */
    setFieldsV1(fieldsV1) {
        this['fieldsV1'] = fieldsV1;
    }
/**
     * Returns Manager is an identifier of the workflow managing these fields.
     * @return {String}
     */
    getManager() {
        return this.manager;
    }

    /**
     * Sets Manager is an identifier of the workflow managing these fields.
     * @param {String} manager Manager is an identifier of the workflow managing these fields.
     */
    setManager(manager) {
        this['manager'] = manager;
    }
/**
     * Returns Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     * @return {String}
     */
    getOperation() {
        return this.operation;
    }

    /**
     * Sets Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     * @param {String} operation Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     */
    setOperation(operation) {
        this['operation'] = operation;
    }
/**
     * Returns Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
     * @return {String}
     */
    getTime() {
        return this.time;
    }

    /**
     * Sets Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
     * @param {String} time Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
     */
    setTime(time) {
        this['time'] = time;
    }

}

/**
 * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
 * @member {String} apiVersion
 */
V1ManagedFieldsEntry.prototype['apiVersion'] = undefined;

/**
 * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
 * @member {String} fieldsType
 */
V1ManagedFieldsEntry.prototype['fieldsType'] = undefined;

/**
 * FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
 * @member {String} fieldsV1
 */
V1ManagedFieldsEntry.prototype['fieldsV1'] = undefined;

/**
 * Manager is an identifier of the workflow managing these fields.
 * @member {String} manager
 */
V1ManagedFieldsEntry.prototype['manager'] = undefined;

/**
 * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
 * @member {String} operation
 */
V1ManagedFieldsEntry.prototype['operation'] = undefined;

/**
 * Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
 * @member {String} time
 */
V1ManagedFieldsEntry.prototype['time'] = undefined;






export default V1ManagedFieldsEntry;

