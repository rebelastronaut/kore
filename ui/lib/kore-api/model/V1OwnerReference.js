/**
 * Kore API
 * Kore API provides the frontend API (kore.appvia.io)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@appvia.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1OwnerReference model module.
 * @module model/V1OwnerReference
 * @version 0.0.1
 */
class V1OwnerReference {
    /**
     * Constructs a new <code>V1OwnerReference</code>.
     * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
     * @alias module:model/V1OwnerReference
     * @param apiVersion {String} API version of the referent.
     * @param kind {String} Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @param name {String} Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @param uid {String} UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    constructor(apiVersion, kind, name, uid) { 
        
        V1OwnerReference.initialize(this, apiVersion, kind, name, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiVersion, kind, name, uid) { 
        obj['apiVersion'] = apiVersion;
        obj['kind'] = kind;
        obj['name'] = name;
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>V1OwnerReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1OwnerReference} obj Optional instance to populate.
     * @return {module:model/V1OwnerReference} The populated <code>V1OwnerReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1OwnerReference();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('blockOwnerDeletion')) {
                obj['blockOwnerDeletion'] = ApiClient.convertToType(data['blockOwnerDeletion'], 'Boolean');
            }
            if (data.hasOwnProperty('controller')) {
                obj['controller'] = ApiClient.convertToType(data['controller'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns API version of the referent.
     * @return {String}
     */
    getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets API version of the referent.
     * @param {String} apiVersion API version of the referent.
     */
    setApiVersion(apiVersion) {
        this['apiVersion'] = apiVersion;
    }
/**
     * Returns If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     * @return {Boolean}
     */
    getBlockOwnerDeletion() {
        return this.blockOwnerDeletion;
    }

    /**
     * Sets If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     * @param {Boolean} blockOwnerDeletion If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     */
    setBlockOwnerDeletion(blockOwnerDeletion) {
        this['blockOwnerDeletion'] = blockOwnerDeletion;
    }
/**
     * Returns If true, this reference points to the managing controller.
     * @return {Boolean}
     */
    getController() {
        return this.controller;
    }

    /**
     * Sets If true, this reference points to the managing controller.
     * @param {Boolean} controller If true, this reference points to the managing controller.
     */
    setController(controller) {
        this['controller'] = controller;
    }
/**
     * Returns Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @return {String}
     */
    getKind() {
        return this.kind;
    }

    /**
     * Sets Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @param {String} kind Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    setKind(kind) {
        this['kind'] = kind;
    }
/**
     * Returns Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * @param {String} name Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * @return {String}
     */
    getUid() {
        return this.uid;
    }

    /**
     * Sets UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * @param {String} uid UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    setUid(uid) {
        this['uid'] = uid;
    }

}

/**
 * API version of the referent.
 * @member {String} apiVersion
 */
V1OwnerReference.prototype['apiVersion'] = undefined;

/**
 * If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
 * @member {Boolean} blockOwnerDeletion
 */
V1OwnerReference.prototype['blockOwnerDeletion'] = undefined;

/**
 * If true, this reference points to the managing controller.
 * @member {Boolean} controller
 */
V1OwnerReference.prototype['controller'] = undefined;

/**
 * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
 * @member {String} kind
 */
V1OwnerReference.prototype['kind'] = undefined;

/**
 * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
 * @member {String} name
 */
V1OwnerReference.prototype['name'] = undefined;

/**
 * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
 * @member {String} uid
 */
V1OwnerReference.prototype['uid'] = undefined;






export default V1OwnerReference;

