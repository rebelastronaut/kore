---
version: 2.1

orbs:
  kube-orb: circleci/kubernetes@0.11.0
  slack: circleci/slack@3.4.2

parameters:
  enable_e2e:
    type: boolean
    default: false

  enable_gke_e2e:
    type: boolean
    default: false

  enable_eks_e2e:
    type: boolean
    default: false

#
# Templates ---
#

services_etcd: &SERVICES_ETCD
  name: etcd
  image: bitnami/etcd:latest
  environment:
    ALLOW_NONE_AUTHENTICATION: "yes"

services_redis: &SERVICES_REDIS
  name: redis
  image: redis:5

services_database: &SERVICES_DATABASE
  name: database
  image: mariadb:bionic
  environment:
    MYSQL_ROOT_PASSWORD: pass
  command:
    sh -c "
      echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

services_kubectrlmgr: &SERVICES_KUBECTRLMGR
  name: kube-controller-manager
  image: gcr.io/google-containers/kube-controller-manager-amd64:v1.15.11
  command:
    - /usr/local/bin/kube-controller-manager
    - --master=http://kube-apiserver:8080

services_kubeapisvr: &SERVICES_KUBEAPISVR
  name: kube-apiserver
  image: gcr.io/google-containers/kube-apiserver-amd64:v1.15.11
  command:
    - /usr/local/bin/kube-apiserver
    - --address=0.0.0.0
    - --alsologtostderr
    - --authorization-mode=RBAC
    - --bind-address=0.0.0.0
    - --default-watch-cache-size=200
    - --delete-collection-workers=10
    - --etcd-servers=http://etcd:2379
    - --log-flush-frequency=10s
    - --runtime-config=autoscaling/v1=false
    - --runtime-config=autoscaling/v2beta1=false
    - --runtime-config=autoscaling/v2beta2=false
    - --runtime-config=batch/v1=false
    - --runtime-config=batch/v1beta1=false
    - --runtime-config=networking.k8s.io/v1=false
    - --runtime-config=networking.k8s.io/v1beta1=false
    - --runtime-config=node.k8s.io/v1beta1=false

services: &SERVICES
  - image: circleci/golang:1.14
  - *SERVICES_ETCD
  - *SERVICES_REDIS
  - *SERVICES_DATABASE
  - *SERVICES_KUBECTRLMGR
  - *SERVICES_KUBEAPISVR

service_env: &SERVICES_ENV
  KORE_ADMIN_PASS: "password"
  KORE_ADMIN_TOKEN: "password"
  KORE_AUTHENTICATION_PLUGINS: "admintoken,basicauth,localjwt,openid"
  KORE_CERTIFICATE_AUTHORITY: "hack/ca/ca.pem"
  KORE_CERTIFICATE_AUTHORITY_KEY: "hack/ca/ca-key.pem"
  KORE_HMAC: "bdT2Qg6DybsLIwc0TbYWrkGC4auovscg"
  # The below must be matched with the private key in the API test project:
  KORE_LOCAL_JWT_PUBLIC_KEY: "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIG6XiNhkwDETU2zk0tGlI0DKlbEJcN4jxwJBqhd3neReLDnqg9SBgKepdy9Nxw5LAd1gNoBkLvdFJg9SbHlM0sCAwEAAQ=="
  KORE_UI_PUBLIC_URL: "http://localhost:3000"
  KUBE_API_SERVER: "http://kube-apiserver:8080"
  USERS_DB_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"

e2e_job_template: &E2E_JOB_TEMPLATE
  parameters:
    enable_eks:
      type: boolean
      default: false
    enable_gke:
      type: boolean
      default: false
    host:
      type: string
      default: http://127.0.0.1:10080

  environment:
    ENABLE_EKS_E2E: << parameters.enable_eks >>
    ENABLE_GKE_E2E: << parameters.enable_gke >>
    KORE_ADMIN_TOKEN: "password"
    KORE_API_PUBLIC_URL_QA: << parameters.host >>

  docker:
    *SERVICES

  steps:
    - checkout
    - run:
        name: Installing tools
        command: |
          sudo apt install -y bash bats curl jq awscli
    - run:
        name: Installing kubectl
        command: |
          sudo curl -L https://storage.googleapis.com/kubernetes-release/release/v1.15.11/bin/linux/amd64/kubectl -o /bin/kubectl
          sudo chmod +x /bin/kubectl
    - run:
        name: Building binaries
        command: |
          make kore-apiserver
          make kore
          sudo cp bin/kore /bin/kore
          /bin/kubectl version --client
    - run:
        name: Running the Kore API
        command: |
          export AUTH_PROXY_IMAGE="quay.io/appvia/auth-proxy:${CIRCLE_SHA1}"
          bin/kore-apiserver --disable-json-logging --verbose
        background: true
        environment:
          <<: *SERVICES_ENV
    - run:
        name: Waiting for API
        command: |
          curl -s \
            --retry 10 \
            --retry-connrefused \
            --retry-delay 5 \
            ${KORE_API_PUBLIC_URL_QA}/healthz
    - run:
        name: Running E2E Suite
        no_output_timeout: 30m
        command: |
          test/e2e/check-suite.sh \
            --enable-e2e-user ${KORE_E2E_USER} \
            --enable-gke ${ENABLE_GKE_E2E} \
            --enable-eks ${ENABLE_EKS_E2E}
    - slack/notify-on-failure:
        only_for_branches: master
#
# Jobs ---
#

jobs:
  check:
    environment:
      USE_GIT_VERSION: "true"

    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - run:
          name: Check
          command: |
            make check

  build:
    environment:
      USE_GIT_VERSION: "true"

    resource_class: large
    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - run:
          name: Build
          command: |
            make build
      - persist_to_workspace:
          root: ~/project
          paths:
            - bin

  test:
    environment:
      USE_GIT_VERSION: "true"

    resource_class: large
    docker:
      - image: circleci/golang:1.14
      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
            echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
            /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"

    steps:
      - checkout
      - run:
          name: Test
          environment:
            TEST_USERS_DATABASE_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
          command: |
            make test

  test-api:
    environment:
      USE_GIT_VERSION: "true"

    resource_class: large
    docker:
      *SERVICES

    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          command: |
            make kore-apiserver
            bin/kore-apiserver --verbose
          background: true
          environment:
            <<: *SERVICES_ENV
      - run:
          name: Checking swagger
          command: |
            make swagger-json
            make swagger-validate
      - run:
          name: Checking UI auto-gen
          working_directory: ~/project/ui
          command: |
            # Now we've updated the swagger from the live API, we can check
            # that the kore autogen in the UI project is up to date as well.
            # Doesn't fit here logically but does in terms of efficiency.
            make check-kore-autogen
      - run:
          name: Integration testing API
          command: |
            make check-swagger-apiclient api-test
          environment:
            <<: *SERVICES_ENV

  check-apis:
    environment:
      USE_GIT_VERSION: "true"

    resource_class: large
    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - run:
          name: Checking generated API resources
          command: |
            make check-apis

  release:
    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            VERSION=${CIRCLE_TAG:-latest} make images
            VERSION=${CIRCLE_TAG:-latest} make push-images
            # These are used for QA
            VERSION=${CIRCLE_SHA1} make images
            VERSION=${CIRCLE_SHA1} make push-images

  check-release-notes:
    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - run:
          command: |
            VERSION=${CIRCLE_TAG} make check-release-notes

  publish-release:
    docker:
      - image: circleci/golang:1.14

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Installing helm
          command: |
            sudo curl -sL https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz -o helm.tar.gz
            sudo tar -xzf helm.tar.gz --strip-components=1 -C /bin/ linux-amd64/helm
            sudo chmod +x /bin/helm
      - deploy:
          command: |
            VERSION=${CIRCLE_TAG} make package
            VERSION=${CIRCLE_TAG} make push-release-packages

  build-ui:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
            keys:
              - ui-node-v1-{{ checksum "ui/package-lock.json" }}
              - ui-node-v1-
      - run:
          name: Installing UI dependencies
          working_directory: ~/project/ui
          command: |
            make deps
      - save_cache:
            paths:
              - ui/node_modules
            key: ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - run:
          name: Building UI
          working_directory: ~/project/ui
          command: |
            make build

  test-ui:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
            keys:
              - ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - run:
          name: Testing UI
          working_directory: ~/project/ui
          command: |
            # Restore node modules only if we've not got a cache hit.
            [[ -d node_modules ]] || make deps
            make test

  test-ui-e2e:
    resource_class: xlarge
    docker:
      - image: circleci/node:12
      - *SERVICES_ETCD
      - *SERVICES_REDIS
      - *SERVICES_DATABASE
      - *SERVICES_KUBECTRLMGR
      - *SERVICES_KUBEAPISVR

    steps:
      - checkout
      - restore_cache:
            keys:
              - ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - run:
          name: Running kore-ui
          working_directory: ~/project/ui
          command: |
            # Restore node modules only if we've not got a cache hit.
            [[ -d node_modules ]] || make deps
            make build
            npm start
          background: true
          environment:
            KORE_UI_DISABLE_ANIMATIONS: 'true'
            KORE_BASE_URL: http://localhost:3000
            KORE_API_URL: http://localhost:10080/api/v1alpha1
            KORE_API_TOKEN: password
            REDIS_URL: redis://redis:6379
      - run:
          name: Install Headless Chrome dependencies
          command: ./ui/scripts/install-e2e-deps.sh
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Running kore-apiserver
          command: |
            /tmp/workspace/bin/kore-apiserver --verbose
          background: true
          environment:
            <<: *SERVICES_ENV
      - run:
          name: Waiting for API and UI
          command: |
            make api-wait
            make ui-wait
      - run:
          name: End-to-end testing UI
          working_directory: ~/project/ui
          environment:
            NODE_ENV: development
          command: |
            make test-e2e

  release-ui:
    environment:
      KORE_UI_IMAGE: quay.io/appvia/kore-ui
    docker:
      - image: docker:19.03-dind
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Publishing UI to quay.io
          working_directory: ~/project/ui
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            docker build -t ${KORE_UI_IMAGE}:${CIRCLE_SHA1} --build-arg version=${CIRCLE_TAG:-${CIRCLE_SHA1}} .
            docker tag ${KORE_UI_IMAGE}:${CIRCLE_SHA1} ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_UI_IMAGE}:${CIRCLE_SHA1}

  deploy-qa:
    docker:
      - image: alpine/helm:3.1.2
    steps:
      - checkout
      - run:
          name: Installing GNU
          command: |
            apk add bash coreutils curl --update
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA
      - run:
          name: Deploying to QA
          command: |
            export BUILD_ID=${CIRCLE_SHA1}
            export VERSION=${CIRCLE_SHA1}
            echo "Deploying to QA, version: ${VERSION}"
            hack/deploy-qa.sh
      - slack/notify-on-failure:
        only_for_branches: master

  deploy-demo:
    docker:
      - image: alpine/helm:3.1.2
    steps:
      - checkout
      - run:
          name: Installing GNU
          command: |
            apk add bash coreutils curl --update
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA_DEMO
      - run:
          name: Deploying to Demo
          command: |
            export BUILD_ID=${CIRCLE_SHA1}
            export VERSION=${CIRCLE_SHA1}
            echo "Deploying to demo, version: ${VERSION}"
            hack/deploy-demo.sh
      - slack/notify-on-failure:
        only_for_branches: master

  # This releases the local images for kore-apiserver and the auth-proxy; to
  # ensure we have a complete e2e
  e2e-images:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Releasing E2E Images
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            VERSION=${CIRCLE_SHA1} make images
            VERSION=${CIRCLE_SHA1} make push-images

  e2e_gke:
    <<: *E2E_JOB_TEMPLATE

  e2e_eks:
    <<: *E2E_JOB_TEMPLATE

workflows:
  version: 2.1
  workflow:
    unless: << pipeline.parameters.enable_e2e >>
    jobs:
      - check:
          filters:
            tags:
              only: /^v.*$/
      - build:
          filters:
            tags:
              only: /^v.*$/
      - test:
          filters:
            tags:
              only: /^v.*$/
      - test-api:
          filters:
            tags:
              only: /^v.*$/
      - check-apis:
          filters:
            tags:
              only: /^v.*$/
      - release:
          requires:
            - check
            - build
            - test
            - test-api
            - check-apis
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
      - check-release-notes:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+))$/
      - e2e-images:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
      - e2e_gke:
          enable_gke: true
          requires:
            - e2e-images
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
      - e2e_eks:
          enable_eks: true
          requires:
            - e2e-images
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
      - publish-release:
          requires:
            - check
            - build
            - test
            - test-api
            - check-apis
            - check-release-notes
            - e2e_eks
            - e2e_gke
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
      - build-ui:
          filters:
            tags:
              only: /^v.*$/
      - test-ui:
          filters:
            tags:
              only: /^v.*$/
      - test-ui-e2e:
          requires:
            - build
          filters:
            tags:
              only: /^v.*$/
      - release-ui:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
          requires:
            - build-ui
            - test-ui
            - test-ui-e2e
      - deploy-qa:
          filters:
            branches:
              only: master
          requires:
            - release
            - release-ui
      - request-deploy-demo:
          type: approval
          requires:
            - release
            - release-ui
      - deploy-demo:
          filters:
            branches:
              only: master
          requires:
            - request-deploy-demo

  e2e_gke:
    when: << pipeline.parameters.enable_gke_e2e >>
    jobs:
      - e2e-images
      - e2e_gke:
          enable_gke: true
          requires:
            - e2e-images

  e2e_eks:
    when: << pipeline.parameters.enable_eks_e2e >>
    jobs:
      - e2e-images
      - e2e_eks:
          enable_eks: true
          requires:
            - e2e-images
  nightly:
    triggers:
      - schedule:
          cron: "0 21 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e-images
      - e2e_gke:
          enable_gke: true
          requires:
            - e2e-images
      - e2e_eks:
          enable_eks: true
          requires:
            - e2e-images
